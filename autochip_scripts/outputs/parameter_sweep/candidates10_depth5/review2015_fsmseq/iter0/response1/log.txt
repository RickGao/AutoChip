{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.\n\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\tinput data,\n\toutput start_shifting);'}
{'assistant': '```verilog
module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);

	// Define states
	parameter IDLE = 2'b00;
	parameter S0   = 2'b01;
	parameter S1   = 2'b10;
	parameter FOUND = 2'b11;

	// Define signals
	reg [1:0] state;
	reg start_shifting;

	// Next-state logic
	always @(posedge clk or posedge reset) begin
		if (reset) begin
			state <= IDLE;
			start_shifting <= 0;
		end 
		else begin
			case(state)
				IDLE: begin
					if (data) begin
						state <= S0;
					end
				end

				S0: begin
					if (data) begin
						state <= S1;
					end
					else begin
						state <= IDLE;
					end
				end

				S1: begin
					if (data) begin
						state <= FOUND;
						start_shifting <= 1;
					end
					else begin
						state <= IDLE;
					end
				end

				FOUND: begin
					state <= FOUND;
					start_shifting <= 1;
				end

				default: begin
					state <= IDLE;
					start_shifting <= 0;
				end
			endcase
		end
	end

endmodule
```'}

 Iteration rank: -1
