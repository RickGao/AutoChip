system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // We want to create a timer with one input that:

// (1) is started when a particular input pattern (1101) is detected,
// (2) shifts in 4 more bits to determine the duration to delay,
// (3) waits for the counters to finish counting, and
// (4) notifies the user and waits for the user to acknowledge the timer.

// The serial data is available on the data input pin. When the pattern 1101 is received, the circuit must then shift in the next 4 bits, most-significant-bit first. These 4 bits determine the duration of the timer delay, referred to as delay[3:0]. After that, the state machine asserts its counting output to indicate it is counting. Once the 1101 and delay[3:0] have been read, the circuit no longer looks at the data input until it resumes searching after everything else is done.

// The state machine must count for exactly (delay[3:0] + 1) * 1000 clock cycles. e.g., delay=0 means count 1000 cycles, and delay=5 means count 6000 cycles. Also output the current remaining time. This should be equal to delay for 1000 cycles, then delay-1 for 1000 cycles, and so on until it is 0 for 1000 cycles. 

// When the circuit isn't counting, the count[3:0] output is don't-care (whatever value is convenient for you to implement). At that point, the circuit must assert done to notify the user the timer has timed out, and waits until input ack is 1 before being reset to look for the next occurrence of the start sequence (1101).

// The circuit should reset into a state where it begins searching for the input sequence 1101. The reset signal is active high synchronous. 


module top_module(
	input wire clk,
	input wire reset,
	input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );
assistant: module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );
    
    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [1:0] state, next_state;
    
    localparam IDLE = 2'd0,
               READ_DELAY = 2'd1,
               COUNT = 2'd2,
               WAIT_ACK = 2'd3;
    
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
        end else begin
            state <= next_state;
            if (state == IDLE || state == READ_DELAY) begin
                if (data)
                    bit_count <= bit_count + 1;
                else
                    bit_count <= 0;
            end else if (state == COUNT) begin
                if (countdown > 0) begin
                    if (cycle_count == 10'b11_1111_1111) begin
                        countdown <= countdown - 1;
                        cycle_count <= 0;
                    end else begin
                        cycle_count <= cycle_count + 1;
                    end
                end
            end else if (state == WAIT_ACK) begin
                if (ack) begin
                    done <= 0;
                    counting <= 0;
                end
            end
        end
    end
    
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'hD) begin
                    next_state = READ_DELAY;
                    bit_count = 0;
                end
            end
            
            READ_DELAY: begin
                if (bit_count == 4'h4) begin
                    delay = {bit_count, bit_count - 1, bit_count - 2, bit_count - 3}; // 4 MSB delay
                    next_state = COUNT;
                    cycle_count = 0;
                    countdown = delay;
                    counting = 1;
                end
            end
            
            COUNT: begin
                if (cycle_count == {10{1'b1}}) begin
                    if (countdown == 0) begin
                        next_state = WAIT_ACK;
                        done = 1;
                    end
                end
            end

            WAIT_ACK: begin
                if (ack) begin
                    next_state = IDLE;
                end
            end
        endcase
    end
    
    assign count = (counting) ? countdown : 4'bx;
    
endmodule


user: The design failed to compile. Please fix the module. The output of iverilog is as follows:
/home/jmb9986/AutoChip/autochip_scripts/outputs/gpt-4o/can1_depth5/human/review2015_fancytimer/iter0/response0/top_module.sv:64: error: Concatenation operand "(bit_count)-('sd1)" has indefinite width.
/home/jmb9986/AutoChip/autochip_scripts/outputs/gpt-4o/can1_depth5/human/review2015_fancytimer/iter0/response0/top_module.sv:64: error: Concatenation operand "(bit_count)-('sd2)" has indefinite width.
/home/jmb9986/AutoChip/autochip_scripts/outputs/gpt-4o/can1_depth5/human/review2015_fancytimer/iter0/response0/top_module.sv:64: error: Concatenation operand "(bit_count)-('sd3)" has indefinite width.
3 error(s) during elaboration.

assistant: module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [1:0] state, next_state;

    localparam IDLE = 2'd0,
               READ_DELAY = 2'd1,
               COUNT = 2'd2,
               WAIT_ACK = 2'd3;

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
        end else begin
            state <= next_state;
            if (state == IDLE || state == READ_DELAY) begin
                if (state == IDLE && data == 1'b1) begin
                    bit_count <= (bit_count << 1) | data;
                end else if (state == READ_DELAY) begin
                    bit_count <= bit_count + 1;
                    if (bit_count < 4) begin
                        delay <= {delay[2:0], data};
                    end
                end
            end else if (state == COUNT) begin
                if (countdown > 0) begin
                    if (cycle_count == 10'd999) begin
                        countdown <= countdown - 1;
                        cycle_count <= 0;
                    end else begin
                        cycle_count <= cycle_count + 1;
                    end
                end
            end else if (state == WAIT_ACK) begin
                if (ack) begin
                    done <= 0;
                    counting <= 0;
                end
            end
        end
    end

    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'b1101) begin
                    next_state = READ_DELAY;
                    bit_count = 0;
                    delay = 0;
                end
            end

            READ_DELAY: begin
                if (bit_count == 4) begin
                    next_state = COUNT;
                    cycle_count = 0;
                    countdown = delay;
                    counting = 1;
                end
            end

            COUNT: begin
                if (cycle_count == 10'd999) begin
                    if (countdown == 0) begin
                        next_state = WAIT_ACK;
                        done = 1;
                    end
                end
            end

            WAIT_ACK: begin
                if (ack) begin
                    next_state = IDLE;
                end
            end
        endcase
    end

    assign count = (counting) ? countdown : 4'bxxxx;

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: The first test case should count for 2000 cycles. Your circuit counted 0
Hint: The second test case should count for 15000 cycles. Your circuit counted 0
Hint: Your FSM didn't pass the sample timing diagram posted with the problem statement. Perhaps try debugging that?
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fancytimer/review2015_fancytimer_tb.sv:170: $finish called at 1177236 (1ps)
Hint: Output 'count' has 233794 mismatches. First mismatch occurred at time 130.
Hint: Output 'counting' has 233794 mismatches. First mismatch occurred at time 130.
Hint: Output 'done' has 524 mismatches. First mismatch occurred at time 20130.
Hint: Total mismatched samples is 234318 out of 235447 samples

Simulation finished at 1177236 ps
Mismatches: 234318 in 235447 samples

assistant: module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [2:0] state, next_state;

    localparam IDLE = 3'd0,
               READ_DELAY = 3'd1,
               COUNT = 3'd2,
               WAIT_ACK = 3'd3,
               FINISHED = 3'd4;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
        end else begin
            state <= next_state;
            if (state == IDLE) begin
                bit_count <= {bit_count[2:0], data};
            end else if (state == READ_DELAY) begin
                bit_count <= bit_count + 1;
                if (bit_count < 4) begin
                    delay <= {delay[2:0], data};
                end
            end else if (state == COUNT) begin
                if (cycle_count == 10'd999) begin
                    cycle_count <= 0;
                    if (countdown > 0) begin
                        countdown <= countdown - 1;
                    end else begin
                        next_state = FINISHED;
                    end
                end else begin
                    cycle_count <= cycle_count + 1;
                end
            end
        end
    end

    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'b1101) begin
                    next_state = READ_DELAY;
                    bit_count = 0;
                    delay = 0;
                end
            end

            READ_DELAY: begin
                if (bit_count == 4) begin
                    next_state = COUNT;
                    cycle_count = 0;
                    countdown = delay;
                    counting = 1;
                    bit_count = 0;
                end
            end

            COUNT: begin
                if (cycle_count == 10'd999 && countdown == 0) begin
                    next_state = FINISHED;
                end
            end

            FINISHED: begin
                counting = 0;
                done = 1;
                if (ack) begin
                    next_state = IDLE;
                    done = 0;
                end
            end

            default: next_state = IDLE;
        endcase
    end

    assign count = (counting) ? countdown : 4'bxxxx;

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: The first test case should count for 2000 cycles. Your circuit counted 2002
Hint: The second test case should count for 15000 cycles. Your circuit counted 15207
Hint: Your FSM didn't pass the sample timing diagram posted with the problem statement. Perhaps try debugging that?
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fancytimer/review2015_fancytimer_tb.sv:170: $finish called at 1177236 (1ps)
Hint: Output 'count' has 231152 mismatches. First mismatch occurred at time 130.
Hint: Output 'counting' has 1666 mismatches. First mismatch occurred at time 130.
Hint: Output 'done' has 882 mismatches. First mismatch occurred at time 20130.
Hint: Total mismatched samples is 231940 out of 235447 samples

Simulation finished at 1177236 ps
Mismatches: 231940 in 235447 samples

assistant: module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [2:0] state, next_state;

    localparam IDLE = 3'd0,
               READ_DELAY = 3'd1,
               COUNT = 3'd2,
               WAIT_ACK = 3'd3,
               FINISHED = 3'd4;

    // FSM state transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
            delay <= 0;
            cycle_count <= 0;
            countdown <= 0;
        end else begin
            state <= next_state;
            case (next_state)
                IDLE: begin
                    bit_count <= {bit_count[2:0], data};
                end
                READ_DELAY: begin
                    bit_count <= bit_count + 1;
                    if (bit_count < 3) begin
                        delay <= {delay[2:0], data};
                    end
                end
                COUNT: begin
                    if (cycle_count == 10'd999) begin
                        cycle_count <= 0;
                        if (countdown != 0) begin
                            countdown <= countdown - 1;
                        end
                    end else begin
                        cycle_count <= cycle_count + 1;
                    end
                end
                FINISHED: begin
                    if (ack) begin
                        done <= 0;
                        counting <= 0;
                    end
                end
                default: ;
            endcase
        end
    end

    // FSM next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'b1101) begin
                    next_state = READ_DELAY;
                    bit_count = 0;
                    delay = 0;
                end
            end

            READ_DELAY: begin
                if (bit_count == 4) begin
                    next_state = COUNT;
                    cycle_count = 0;
                    countdown = delay + 1;
                    counting = 1;
                    bit_count = 0;
                end
            end

            COUNT: begin
                if (cycle_count == 10'd999 && countdown == 0) begin
                    next_state = FINISHED;
                end
            end

            FINISHED: begin
                if (ack) begin
                    next_state = IDLE;
                end
            end

            default: next_state = IDLE;
        endcase
    end

    assign count = (counting) ? countdown : 4'bxxxx;

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: The first test case should count for 2000 cycles. Your circuit counted 2003
Hint: The second test case should count for 15000 cycles. Your circuit counted 15207
Hint: Your FSM didn't pass the sample timing diagram posted with the problem statement. Perhaps try debugging that?
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fancytimer/review2015_fancytimer_tb.sv:170: $finish called at 1177236 (1ps)
Hint: Output 'count' has 218692 mismatches. First mismatch occurred at time 20250.
Hint: Output 'counting' has 866 mismatches. First mismatch occurred at time 20130.
Hint: Output 'done' has 524 mismatches. First mismatch occurred at time 20130.
Hint: Total mismatched samples is 219480 out of 235447 samples

Simulation finished at 1177236 ps
Mismatches: 219480 in 235447 samples

assistant: module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output reg [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [2:0] state, next_state;

    localparam IDLE = 3'd0,
               READ_DELAY = 3'd1,
               COUNT = 3'd2,
               WAIT_ACK = 3'd3,
               FINISHED = 3'd4;

    // FSM state transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
            delay <= 0;
            cycle_count <= 0;
            countdown <= 0;
        end else begin
            state <= next_state;
            case (next_state)
                IDLE: begin
                    if (bit_count == 4'b1101) begin
                        bit_count <= 0;
                    end else begin
                        bit_count <= {bit_count[2:0], data};
                    end
                end
                READ_DELAY: begin
                    if (bit_count < 4) begin
                        delay <= {delay[2:0], data};
                        bit_count <= bit_count + 1;
                    end
                end
                COUNT: begin
                    if (cycle_count == 10'd999) begin
                        cycle_count <= 0;
                        if (countdown != 0) begin
                            countdown <= countdown - 1;
                        end
                    end else begin
                        cycle_count <= cycle_count + 1;
                    end
                end
                FINISHED: done <= 1;
                default: ;
            endcase
        end
    end

    // FSM next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'b1101) begin
                    next_state = READ_DELAY;
                end
            end

            READ_DELAY: begin
                if (bit_count == 4) begin
                    next_state = COUNT;
                end
            end

            COUNT: begin
                if (cycle_count == 10'd999 && countdown == 0) begin
                    next_state = FINISHED;
                end
            end

            FINISHED: begin
                if (ack) begin
                    next_state = IDLE;
                    done <= 0;
                end
            end

            default: next_state = IDLE;
        endcase
    end

    assign count = (counting) ? countdown : 4'bxxxx;

    // Control the counting and done signals
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            counting <= 0;
            done <= 0;
        end else begin
            if (state == COUNT) begin
                counting <= 1;
                done <= 0;
            end else if (state == FINISHED) begin
                counting <= 0;
                done <= 1;
            end
        end
    end

    // Generate cycle_count to handle 1000 clock cycles
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            cycle_count <= 0;
        end else if (state == COUNT) begin
            if (cycle_count == 10'd999) begin
                cycle_count <= 0;
            end else begin
                cycle_count <= cycle_count + 1;
            end
        end else begin
            cycle_count <= 0;
        end
    end

    // Generate the count output
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            count <= 0;
        end else if (state == COUNT) begin
            count <= countdown;
        end else begin
            count <= 4'bxxxx;
        end
    end

endmodule


user: The design failed to compile. Please fix the module. The output of iverilog is as follows:
/home/jmb9986/AutoChip/autochip_scripts/outputs/gpt-4o/can1_depth5/human/review2015_fancytimer/iter4/response0/top_module.sv:133: error: count Unable to assign to unresolved wires.
/home/jmb9986/AutoChip/autochip_scripts/outputs/gpt-4o/can1_depth5/human/review2015_fancytimer/iter4/response0/top_module.sv:135: error: count Unable to assign to unresolved wires.
/home/jmb9986/AutoChip/autochip_scripts/outputs/gpt-4o/can1_depth5/human/review2015_fancytimer/iter4/response0/top_module.sv:137: error: count Unable to assign to unresolved wires.
3 error(s) during elaboration.

assistant: module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output reg [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [2:0] state, next_state;

    localparam IDLE = 3'd0,
               READ_DELAY = 3'd1,
               COUNT = 3'd2,
               WAIT_ACK = 3'd3,
               FINISHED = 3'd4;

    // FSM state transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
            delay <= 0;
            cycle_count <= 0;
            countdown <= 0;
        end else begin
            state <= next_state;
            case (next_state)
                IDLE: begin
                    bit_count <= 0;
                    if (bit_count == 4'b1101) begin
                        bit_count <= 0;
                    end else begin
                        bit_count <= {bit_count[2:0], data};
                    end
                end
                READ_DELAY: begin
                    if (bit_count < 4) begin
                        delay <= {delay[2:0], data};
                        bit_count <= bit_count + 1;
                    end
                end
                COUNT: begin
                    if (cycle_count == 10'd999) begin
                        cycle_count <= 0;
                        if (countdown != 0) begin
                            countdown <= countdown - 1;
                        end
                    end else begin
                        cycle_count <= cycle_count + 1;
                    end
                end
                FINISHED: begin
                    done <= 1;
                    counting <= 0;
                end
                default: ;
            endcase
        end
    end

    // FSM next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'b1101) begin
                    next_state = READ_DELAY;
                end
            end

            READ_DELAY: begin
                if (bit_count == 4) begin
                    next_state = COUNT;
                    counting <= 1;
                    countdown <= delay;
                end
            end

            COUNT: begin
                if (cycle_count == 10'd999 && countdown == 0) begin
                    next_state = FINISHED;
                end
            end

            FINISHED: begin
                if (ack) begin
                    next_state = IDLE;
                    done <= 0;
                end
            end

            default: next_state = IDLE;
        endcase
    end

    // Control the counting and done signals
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            counting <= 0;
            done <= 0;
        end else begin
            if (state == COUNT) begin
                counting <= 1;
                done <= 0;
            end else if (state == FINISHED) begin
                counting <= 0;
                done <= 1;
            end
        end
    end

    // Generate cycle_count to handle 1000 clock cycles
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            cycle_count <= 0;
        end else if (state == COUNT) begin
            if (cycle_count == 10'd999) begin
                cycle_count <= 0;
            end else begin
                cycle_count <= cycle_count + 1;
            end
        end else begin
            cycle_count <= 0;
        end
    end

    // Generate the count output
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            count <= 4'b0;
        end else if (state == COUNT) begin
            count <= countdown;
        end else begin
            count <= 4'b0;
        end
    end

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: The first test case should count for 2000 cycles. Your circuit counted 0
Hint: The second test case should count for 15000 cycles. Your circuit counted 0
Hint: Your FSM didn't pass the sample timing diagram posted with the problem statement. Perhaps try debugging that?
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fancytimer/review2015_fancytimer_tb.sv:170: $finish called at 1177236 (1ps)
Hint: Output 'count' has 218816 mismatches. First mismatch occurred at time 130.
Hint: Output 'counting' has 233794 mismatches. First mismatch occurred at time 130.
Hint: Output 'done' has 524 mismatches. First mismatch occurred at time 20130.
Hint: Total mismatched samples is 234318 out of 235447 samples

Simulation finished at 1177236 ps
Mismatches: 234318 in 235447 samples

Time to Generate: 116.45356392860413
Best ranked response at iteration 3 with response number 0
Rank of best response: 0.06781568675752929
Best response module:
module top_module(
    input wire clk,
    input wire reset,
    input wire data,
    output wire [3:0] count,
    output reg counting,
    output reg done,
    input wire ack );

    reg [3:0] bit_count;
    reg [3:0] delay;
    reg [3:0] countdown;
    reg [9:0] cycle_count;
    reg [2:0] state, next_state;

    localparam IDLE = 3'd0,
               READ_DELAY = 3'd1,
               COUNT = 3'd2,
               WAIT_ACK = 3'd3,
               FINISHED = 3'd4;

    // FSM state transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            counting <= 0;
            done <= 0;
            delay <= 0;
            cycle_count <= 0;
            countdown <= 0;
        end else begin
            state <= next_state;
            case (next_state)
                IDLE: begin
                    bit_count <= {bit_count[2:0], data};
                end
                READ_DELAY: begin
                    bit_count <= bit_count + 1;
                    if (bit_count < 3) begin
                        delay <= {delay[2:0], data};
                    end
                end
                COUNT: begin
                    if (cycle_count == 10'd999) begin
                        cycle_count <= 0;
                        if (countdown != 0) begin
                            countdown <= countdown - 1;
                        end
                    end else begin
                        cycle_count <= cycle_count + 1;
                    end
                end
                FINISHED: begin
                    if (ack) begin
                        done <= 0;
                        counting <= 0;
                    end
                end
                default: ;
            endcase
        end
    end

    // FSM next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (bit_count == 4'b1101) begin
                    next_state = READ_DELAY;
                    bit_count = 0;
                    delay = 0;
                end
            end

            READ_DELAY: begin
                if (bit_count == 4) begin
                    next_state = COUNT;
                    cycle_count = 0;
                    countdown = delay + 1;
                    counting = 1;
                    bit_count = 0;
                end
            end

            COUNT: begin
                if (cycle_count == 10'd999 && countdown == 0) begin
                    next_state = FINISHED;
                end
            end

            FINISHED: begin
                if (ack) begin
                    next_state = IDLE;
                end
            end

            default: next_state = IDLE;
        endcase
    end

    assign count = (counting) ? countdown : 4'bxxxx;

endmodule


