{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\n\nmodule top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);'}
{'assistant': '```verilog
module top_module (
	input clk,
	input in,
	input areset,
	output reg out
);

	reg state, next_state;
	
	// State encoding
	localparam A = 1'b0;
	localparam B = 1'b1;

	always @(posedge clk or posedge areset) begin
		if (areset)
			state <= B;     // Asynchronously reset to state B
		else
			state <= next_state;
	end

	always @(*) begin
		case (state)
			A: begin
				if (in)
					next_state = A;
				else
					next_state = B;
				out = 1'b0;
			end
			B: begin
				if (in)
					next_state = B;
				else
					next_state = A;
				out = 1'b1;
			end
		endcase
	end

endmodule
```'}

 Iteration rank: 1.0
