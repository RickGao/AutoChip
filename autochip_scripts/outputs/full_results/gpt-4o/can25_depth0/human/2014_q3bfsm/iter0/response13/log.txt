{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\n\nmodule top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);'}
{'assistant': '```verilog
module top_module (
	input clk,
	input reset,
	input x,
	output reg z
);

	reg [2:0] state, next_state;

	// State encoding
	localparam STATE_000 = 3'b000;
	localparam STATE_001 = 3'b001;
	localparam STATE_010 = 3'b010;
	localparam STATE_011 = 3'b011;
	localparam STATE_100 = 3'b100;

	// State transition logic
	always @(*) begin
		case (state)
			STATE_000: next_state = (x == 0) ? STATE_000 : STATE_001;
			STATE_001: next_state = (x == 0) ? STATE_001 : STATE_100;
			STATE_010: next_state = (x == 0) ? STATE_010 : STATE_001;
			STATE_011: next_state = (x == 0) ? STATE_001 : STATE_010;
			STATE_100: next_state = (x == 0) ? STATE_011 : STATE_100;
			default: next_state = STATE_000; //default case to reset state machine
		endcase
	end

	// State flip-flops with synchronous active-high reset
	always @(posedge clk) begin
		if (reset) 
			state <= STATE_000;
		else 
			state <= next_state;
	end

	// Output logic
	always @(*) begin
		case (state)
			STATE_011, STATE_100: z = 1;
			default: z = 0;
		endcase
	end

endmodule
```'}

 Iteration rank: 1.0
