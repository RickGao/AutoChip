{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': '```verilog
module top_module (
	input clk,
	input areset,
	input bump_left,
	input bump_right,
	output reg walk_left,
	output reg walk_right
);

	// State encoding
	typedef enum reg {S_LEFT, S_RIGHT} state_t;
	state_t state, next_state;
	
	// Sequential logic: state transition
	always @(posedge clk or posedge areset) begin
		if (areset) begin
			state <= S_LEFT; // Asynchronous reset to walk left
		end else begin
			state <= next_state;
		end
	end
	
	// Combinational logic: next state logic
	always @(*) begin
		case (state)
			S_LEFT: begin
				if (bump_left || (bump_left && bump_right)) begin
					next_state = S_RIGHT; // Switch to walk right
				end else begin
					next_state = S_LEFT; // Continue walking left
				end
			end
			S_RIGHT: begin
				if (bump_right || (bump_left && bump_right)) begin
					next_state = S_LEFT; // Switch to walk left
				end else begin
					next_state = S_RIGHT; // Continue walking right
				end
			end
			default: begin
				next_state = S_LEFT; // Default state
			end
		endcase
	end
	
	// Output logic: Moore FSM outputs depend only on the current state
	always @(*) begin
		case (state)
			S_LEFT: begin
				walk_left = 1;
				walk_right = 0;
			end
			S_RIGHT: begin
				walk_left = 0;
				walk_right = 1;
			end
		endcase
	end

endmodule
```'}

 Iteration rank: 1.0
