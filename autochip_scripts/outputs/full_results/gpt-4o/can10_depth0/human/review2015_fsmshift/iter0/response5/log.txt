{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\n\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);'}
{'assistant': '```verilog
module top_module(
    input clk,
    input reset,
    output reg shift_ena);

    reg [2:0] state, next_state;
    reg [2:0] count;

    localparam IDLE = 3'b000,
               SHIFT1 = 3'b001,
               SHIFT2 = 3'b010,
               SHIFT3 = 3'b011,
               SHIFT4 = 3'b100,

               DONE = 3'b101;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            count <= 3'd0;
        end
        else begin
            state <= next_state;
            if (shift_ena)
                count <= count + 1'b1;
            else
                count <= 3'd0;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (reset)
                    next_state = SHIFT1;
                else
                    next_state = IDLE;
            end

            SHIFT1: next_state = SHIFT2;
            SHIFT2: next_state = SHIFT3;
            SHIFT3: next_state = SHIFT4;
            SHIFT4: next_state = DONE;
            DONE:  next_state = DONE;

            default: next_state = IDLE;
        endcase
    end

    // Output logic
    always @(posedge clk) begin
        if (reset)
            shift_ena <= 1'b1;
        else if (state == DONE)
            shift_ena <= 1'b0;
        else if (reset == 1'b0 && (state == SHIFT1 || state == SHIFT2 || state == SHIFT3 || state == SHIFT4))
            shift_ena <= 1'b1;
        else if (reset == 1'b0 && state == DONE)
            shift_ena <= 1'b0;
        else
            shift_ena <= 1'b0; // This is fallback, should not happen really.
    end

endmodule
```'}

 Iteration rank: 0.97
