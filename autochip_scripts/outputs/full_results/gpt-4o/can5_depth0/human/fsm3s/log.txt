system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a synchronous active high reset that resets the FSM to state A. 
// State | Next state in=0, Next state in=1 | Output
// A | A, B | 0
// B | C, B | 0
// C | A, D | 0
// D | C, B | 1

module top_module (
	input clk,
	input in,
	input reset,
	output out
);
assistant: module top_module (
    input clk,
    input in,
    input reset,
    output reg out
);

    // State encoding
    typedef enum logic [1:0] {
        STATE_A = 2'b00,
        STATE_B = 2'b01,
        STATE_C = 2'b10,
        STATE_D = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State transition logic
    always @(*) begin
        case (current_state)
            STATE_A: begin
                if (in == 1'b0)
                    next_state = STATE_A;
                else
                    next_state = STATE_B;
            end

            STATE_B: begin
                if (in == 1'b0)
                    next_state = STATE_C;
                else
                    next_state = STATE_B;
            end

            STATE_C: begin
                if (in == 1'b0)
                    next_state = STATE_A;
                else
                    next_state = STATE_D;
            end

            STATE_D: begin
                if (in == 1'b0)
                    next_state = STATE_C;
                else
                    next_state = STATE_B;
            end

            default: next_state = STATE_A;
        endcase
    end

    // State register with synchronous reset
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= STATE_A;
        else
            current_state <= next_state;
    end

    // Output logic
    always @(*) begin
        case (current_state)
            STATE_A: out = 1'b0;
            STATE_B: out = 1'b0;
            STATE_C: out = 1'b0;
            STATE_D: out = 1'b1;
            default: out = 1'b0;
        endcase
    end

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/fsm3s/fsm3s_tb.sv:104: $finish called at 1151 (1ps)
Hint: Output 'out' has 3 mismatches. First mismatch occurred at time 65.
Hint: Total mismatched samples is 3 out of 230 samples

Simulation finished at 1151 ps
Mismatches: 3 in 230 samples

Time to Generate: 7.081030368804932
Best ranked response at iteration 0 with response number 2
Rank of best response: 0.9869565217391304
Best response module:
module top_module (
    input clk,
    input in,
    input reset,
    output reg out
);

    // State encoding
    typedef enum logic [1:0] {
        STATE_A = 2'b00,
        STATE_B = 2'b01,
        STATE_C = 2'b10,
        STATE_D = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State transition logic
    always @(*) begin
        case (current_state)
            STATE_A: begin
                if (in == 1'b0)
                    next_state = STATE_A;
                else
                    next_state = STATE_B;
            end

            STATE_B: begin
                if (in == 1'b0)
                    next_state = STATE_C;
                else
                    next_state = STATE_B;
            end

            STATE_C: begin
                if (in == 1'b0)
                    next_state = STATE_A;
                else
                    next_state = STATE_D;
            end

            STATE_D: begin
                if (in == 1'b0)
                    next_state = STATE_C;
                else
                    next_state = STATE_B;
            end

            default: next_state = STATE_A;
        endcase
    end

    // State register with synchronous reset
    always @(posedge clk or posedge reset) begin
        if (reset)
            current_state <= STATE_A;
        else
            current_state <= next_state;
    end

    // Output logic
    always @(*) begin
        case (current_state)
            STATE_A: out = 1'b0;
            STATE_B: out = 1'b0;
            STATE_C: out = 1'b0;
            STATE_D: out = 1'b1;
            default: out = 1'b0;
        endcase
    end

endmodule


