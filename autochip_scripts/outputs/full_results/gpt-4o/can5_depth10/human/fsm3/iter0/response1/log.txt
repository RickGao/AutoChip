{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// The following is the state transition table for a Moore state machine with one input, one output, and four states. Implement this state machine. Include a positive edge triggered asynchronous reset that resets the FSM to state A.\n \n// state | next state in=0, next state in=1 | output\n// A | A, B | 0\n// B | C, B | 0\n// C | A, D | 0\n// D | C, B | 1\n\nmodule top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);'}
{'assistant': '```verilog
module top_module (
	input clk,
	input in,
	input areset,
	output reg out
);

	// Define state encoding
	typedef enum reg [1:0] {
		STATE_A = 2'd0,
		STATE_B = 2'd1,
		STATE_C = 2'd2,
		STATE_D = 2'd3
	} state_t;
	
	state_t state, next_state;

	// State transition on the clock's positive edge
	always @(posedge clk or posedge areset) begin
		if (areset) begin
			state <= STATE_A; // asynchronous reset
		end else begin
			state <= next_state;
		end
	end

	// Next state and output logic
	always @(*) begin
		case(state)
			STATE_A: begin
				next_state = (in) ? STATE_B : STATE_A;
				out = 1'b0;
			end
			STATE_B: begin
				next_state = (in) ? STATE_B : STATE_C;
				out = 1'b0;
			end
			STATE_C: begin
				next_state = (in) ? STATE_D : STATE_A;
				out = 1'b0;
			end
			STATE_D: begin
				next_state = (in) ? STATE_B : STATE_C;
				out = 1'b1;
			end
			default: begin
				next_state = STATE_A; // default to safe state
				out = 1'b0;
			end
		endcase
	end

endmodule
```'}

 Iteration rank: -1
