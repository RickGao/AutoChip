system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.

module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);
assistant: module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting);

    typedef enum logic [2:0] {
        IDLE    = 3'b000,
        S1      = 3'b001,
        S11     = 3'b010,
        S110    = 3'b011,
        S1101   = 3'b100
    } state_t;

    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= IDLE;
        else
            state <= next_state;
    end

    always_comb begin
        start_shifting = 0;
        case (state)
            IDLE: begin
                if (data) 
                    next_state = S1;
                else 
                    next_state = IDLE;
            end
                
            S1: begin
                if (data) 
                    next_state = S11;
                else 
                    next_state = IDLE;
            end

            S11: begin
                if (data) 
                    next_state = S11;
                else 
                    next_state = S110;
            end

            S110: begin
                if (data) 
                    next_state = S1101;
                else 
                    next_state = IDLE;
            end

            S1101: begin
                start_shifting = 1;
                next_state = S1101;
            end
        endcase
    end
endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: Your reset should be synchronous, but doesn't appear to be.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fsmseq/review2015_fsmseq_tb.sv:102: $finish called at 3216 (1ps)
Hint: Output 'start_shifting' has 5 mismatches. First mismatch occurred at time 105.
Hint: Total mismatched samples is 5 out of 643 samples

Simulation finished at 3216 ps
Mismatches: 5 in 643 samples

Time to Generate: 6.885529518127441
Best ranked response at iteration 0 with response number 0
Rank of best response: 0.9922239502332815
Best response module:
module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting);

    typedef enum logic [2:0] {
        IDLE    = 3'b000,
        S1      = 3'b001,
        S11     = 3'b010,
        S110    = 3'b011,
        S1101   = 3'b100
    } state_t;

    state_t state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= IDLE;
        else
            state <= next_state;
    end

    always_comb begin
        start_shifting = 0;
        case (state)
            IDLE: begin
                if (data) 
                    next_state = S1;
                else 
                    next_state = IDLE;
            end
                
            S1: begin
                if (data) 
                    next_state = S11;
                else 
                    next_state = IDLE;
            end

            S11: begin
                if (data) 
                    next_state = S11;
                else 
                    next_state = S110;
            end

            S110: begin
                if (data) 
                    next_state = S1101;
                else 
                    next_state = IDLE;
            end

            S1101: begin
                start_shifting = 1;
                next_state = S1101;
            end
        endcase
    end
endmodule


