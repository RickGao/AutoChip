module top_module (
    input in,
    input [9:0] state,
    output [9:0] next_state,
    output out1,
    output out2);

    assign out1 = (state[7] | state[9]);
    assign out2 = state[6];

    always @(state or in) begin
        case(state)
            10'b001_000_000: next_state = 10'b001_000_000; // S0 (0, 0) --0--> S0
            10'b001_000_000: next_state = 10'b010_000_000; // S0 (0, 0) --1--> S1
            10'b010_000_000: next_state = 10'b001_000_000; // S1 (0, 0) --0--> S0
            10'b010_000_000: next_state = 10'b100_000_000; // S1 (0, 0) --1--> S2
            10'b100_000_000: next_state = 10'b001_000_000; // S2 (0, 0) --0--> S0
            10'b100_000_000: next_state = 10'b110_000_000; // S2 (0, 0) --1--> S3
            10'b110_000_000: next_state = 10'b001_000_000; // S3 (0, 0) --0--> S0
            10'b110_000_000: next_state = 10'b101_000_000; // S3 (0, 0) --1--> S4
            10'b101_000_000: next_state = 10'b001_000_000; // S4 (0, 0) --0--> S0
            10'b101_000_000: next_state = 10'b010_000_001; // S4 (0, 0) --1--> S5
            10'b010_000_001: next_state = 10'b000_100_000; // S5 (0, 0) --0--> S8
            10'b010_000_001: next_state = 10'b011_000_000; // S5 (0, 0) --1--> S6
            10'b011_000_000: next_state = 10'b000_010_000; // S6 (0, 0) --0--> S9
            10'b011_000_000: next_state = 10'b111_000_000; // S6 (0, 0) --1--> S7
            10'b111_000_000: next_state = 10'b001_000_000; // S7 (0, 1) --0--> S0
            10'b111_000_000: next_state = 10'b111_000_000; // S7 (0, 1) --1--> S7
            10'b000_100_000: next_state = 10'b001_000_000; // S8 (1, 0) --0--> S0
            10'b000_100_000: next_state = 10'b010_000_000; // S8 (1, 0) --1--> S1
            10'b000_010_000: next_state = 10'b001_000_000; // S9 (1, 1) --0--> S0
            10'b000_010_000: next_state = 10'b010_000_000; // S9 (1, 1) --1--> S1
            default: next_state = 10'b001_000_000;
        endcase
    end

endmodule
