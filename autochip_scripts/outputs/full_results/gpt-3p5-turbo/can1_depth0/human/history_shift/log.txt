system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Build a 32-bit global history shift register, including support for rolling back state in response to a pipeline flush caused by a branch misprediction. When a branch prediction is made (predict_valid = 1), shift in predict_taken from the LSB side to update the branch history for the predicted branch. (predict_history[0] is the direction of the youngest branch.) When a branch misprediction occurs (train_mispredicted = 1), load the branch history register with the history after the completion of the mispredicted branch. This is the history before the mispredicted branch (train_history) concatenated with the actual result of the branch (train_taken). If both a prediction and misprediction occur at the same time, the misprediction takes precedence, because the pipeline flush will also flush out the branch that is currently making a prediction. predict_history is the value of the branch history register. areset is a positive edge triggered asynchronous reset that resets the history counter to zero.



module top_module
(
    input clk,
    input areset,
    input predict_valid,
    input predict_taken,
    output logic [31:0] predict_history,
    
    input train_mispredicted,
    input train_taken,
    input [31:0] train_history
);
assistant: module top_module
(
    input clk,
    input areset,
    input predict_valid,
    input predict_taken,
    output logic [31:0] predict_history,
    
    input train_mispredicted,
    input train_taken,
    input [31:0] train_history
);

    // Internal signals
    logic [31:0] history_reg;
    logic [31:0] temp_history_reg;
    
    always @(posedge clk or posedge areset) begin
        if (areset)
            history_reg <= 0;
        else begin
            if (predict_valid)
                history_reg <= {history_reg[30:0], predict_taken};
            else if (train_mispredicted)
                history_reg <= {train_history, train_taken};
        end
    end
    
    always @(*) begin
        if (train_mispredicted)
            temp_history_reg = {train_history, train_taken};
        else if (predict_valid)
            temp_history_reg = {history_reg[30:0], predict_taken};
        else
            temp_history_reg = history_reg;
    end
    
    assign predict_history = temp_history_reg;
    
endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: Your reset doesn't seem to be working.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/history_shift/history_shift_tb.sv:128: $finish called at 10276 (1ps)
Hint: Output 'predict_history' has 1534 mismatches. First mismatch occurred at time 20.
Hint: Total mismatched samples is 1534 out of 2055 samples

Simulation finished at 10276 ps
Mismatches: 1534 in 2055 samples

Time to Generate: 2.787843942642212
Best ranked response at iteration 0 with response number 0
Rank of best response: 0.2535279805352798
Best response module:
module top_module
(
    input clk,
    input areset,
    input predict_valid,
    input predict_taken,
    output logic [31:0] predict_history,
    
    input train_mispredicted,
    input train_taken,
    input [31:0] train_history
);

    // Internal signals
    logic [31:0] history_reg;
    logic [31:0] temp_history_reg;
    
    always @(posedge clk or posedge areset) begin
        if (areset)
            history_reg <= 0;
        else begin
            if (predict_valid)
                history_reg <= {history_reg[30:0], predict_taken};
            else if (train_mispredicted)
                history_reg <= {train_history, train_taken};
        end
    end
    
    always @(*) begin
        if (train_mispredicted)
            temp_history_reg = {train_history, train_taken};
        else if (predict_valid)
            temp_history_reg = {history_reg[30:0], predict_taken};
        else
            temp_history_reg = history_reg;
    end
    
    assign predict_history = temp_history_reg;
    
endmodule

module top_module
(
    input clk,
    input areset,
    input predict_valid,
    input predict_taken,
    output logic [31:0] predict_history,
    
    input train_mispredicted,
    input train_taken,
    input [31:0] train_history
);

    // Internal signals
    logic [31:0] history_reg;
    logic [31:0] temp_history_reg;
    
    always @(posedge clk or posedge areset) begin
        if (areset)
            history_reg <= 0;
        else begin
            if (predict_valid)
                history_reg <= {history_reg[30:0], predict_taken};
            else if (train_mispredicted)
                history_reg <= {train_history, train_taken};
        end
    end
    
    always @(*) begin
        if (train_mispredicted)
            temp_history_reg = {train_history, train_taken};
        else if (predict_valid)
            temp_history_reg = {history_reg[30:0], predict_taken};
        else
            temp_history_reg = history_reg;
    end
    
    assign predict_history = temp_history_reg;
    
endmodule


