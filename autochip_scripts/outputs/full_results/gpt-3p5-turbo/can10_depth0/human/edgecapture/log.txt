system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // For each bit in a 32-bit vector, capture when the input signal changes from 1 in one clock cycle to 0 the next. "Capture" means that the output will remain 1 until the register is reset (active high synchronous reset).

module top_module(
	input clk,
	input reset,
	input [31:0] in,
	output reg [31:0] out);
assistant: module top_module(
  input clk,
  input reset,
  input [31:0] in,
  output reg [31:0] out);

  reg [31:0] prev_in;

  always @(posedge clk or posedge reset) begin
    if (reset)
      prev_in <= 0;
    else
      prev_in <= in;
  end

  always @(posedge clk or posedge reset) begin
    if (reset)
      out <= 0;
    else begin
      for (integer i = 0; i < 32; i = i + 1) begin
        if (~prev_in[i] & in[i])
          out[i] <= 1;
        else if (reset)
          out[i] <= 0;
      end
    end
  end

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/edgecapture/edgecapture_tb.sv:103: $finish called at 1330 (1ps)
Hint: Output 'out' has 139 mismatches. First mismatch occurred at time 40.
Hint: Total mismatched samples is 139 out of 266 samples

Simulation finished at 1330 ps
Mismatches: 139 in 266 samples

Time to Generate: 3.379610300064087
Best ranked response at iteration 0 with response number 4
Rank of best response: 0.4774436090225564
Best response module:
module top_module(
  input clk,
  input reset,
  input [31:0] in,
  output reg [31:0] out);

  reg [31:0] prev_in;

  always @(posedge clk or posedge reset) begin
    if (reset)
      prev_in <= 0;
    else
      prev_in <= in;
  end

  always @(posedge clk or posedge reset) begin
    if (reset)
      out <= 0;
    else begin
      for (integer i = 0; i < 32; i = i + 1) begin
        if (~prev_in[i] & in[i])
          out[i] <= 1;
        else if (reset)
          out[i] <= 0;
      end
    end
  end

endmodule


