{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': 'module top_module (
    input clk,
    input areset,
    input bump_left,
    input bump_right,
    output reg walk_left,
    output reg walk_right
);

    // Define state enum
    typedef enum logic [1:0] {
        LEFT,
        RIGHT
    } State;

    // Define state register
    reg [1:0] curr_state;
    
    // Define next state register
    reg [1:0] next_state;

    // Define state output
    assign walk_left = (curr_state == LEFT);
    assign walk_right = (curr_state == RIGHT);

    // Synchronous state machine
    always @(posedge clk or posedge areset) begin
        if (areset) begin
            // Initialize state as LEFT
            curr_state <= LEFT;
        end
        else begin
            // Update next state based on current state and inputs
            case (curr_state)
                LEFT: begin
                    if (bump_right) begin
                        // Transition to RIGHT state if bumped on right
                        next_state <= RIGHT;
                    end
                    else begin
                        // Stay in LEFT state otherwise
                        next_state <= LEFT;
                    end
                end
                RIGHT: begin
                    if (bump_left) begin
                        // Transition to LEFT state if bumped on left
                        next_state <= LEFT;
                    end
                    else begin
                        // Stay in RIGHT state otherwise
                        next_state <= RIGHT;
                    end
                end
                default: next_state <= LEFT; // Default to LEFT state
            endcase
        end
    end

    // Update current state at the end of the clock cycle
    always @(*) begin
        curr_state <= next_state;
    end

endmodule'}

 Iteration rank: 0.17903930131004367
