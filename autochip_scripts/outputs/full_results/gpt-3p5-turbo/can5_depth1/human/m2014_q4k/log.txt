system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Implement a shift register with four D flops. Reset is active-low synchronous resettable.

module top_module (
	input clk,
	input resetn,
	input in,
	output out
);
assistant: module top_module (
	input clk,
	input resetn,
	input in,
	output out
);
	
	reg [3:0] d;

	always @(posedge clk or negedge resetn) begin
		if (!resetn) begin
			d <= 4'b0000;
		end else begin
			d <= {d[2:0], in};
		end
	end
	
	assign out = d[3];

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/m2014_q4k/m2014_q4k_tb.sv:40: $finish called at 1496 (1ps)
Hint: Output 'out' has 14 mismatches. First mismatch occurred at time 270.
Hint: Total mismatched samples is 14 out of 299 samples

Simulation finished at 1496 ps
Mismatches: 14 in 299 samples

assistant: module top_module (
	input clk,
	input resetn,
	input in,
	output out
);
	
	reg [3:0] d;

	always @(posedge clk) begin
		if (!resetn) begin
			d <= 4'b0000;
		end else begin
			d <= {d[2:0], in};
		end
	end
	
	assign out = d[3];

endmodule


Time to Generate: 5.352122068405151
Best ranked response at iteration 1 with response number 0
Rank of best response: 1.0
Best response module:
module top_module (
	input clk,
	input resetn,
	input in,
	output out
);
	
	reg [3:0] d;

	always @(posedge clk) begin
		if (!resetn) begin
			d <= 4'b0000;
		end else begin
			d <= {d[2:0], in};
		end
	end
	
	assign out = d[3];

endmodule


