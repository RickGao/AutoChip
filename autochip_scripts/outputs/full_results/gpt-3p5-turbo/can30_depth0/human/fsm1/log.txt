system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Consider the follow Moore machine with the diagram described below:

// B (1) --0--> A
// B (1) --1--> B
// A (0) --0--> B
// A (0) --1--> A

// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.

module top_module (
	input clk,
	input in,
	input areset,
	output out
);
assistant: module top_module (
	input clk,
	input in,
	input areset,
	output out
);

	// State definition
	typedef enum logic [1:0] {
		B,
		A
	} state_t;

	// Register to hold current state
	reg state_t curr_state;

	// Output register
	reg out_reg;

	// State transition logic
	always_ff @(posedge clk or posedge areset) begin
		if (areset) begin
			curr_state <= B;
		end else begin
			case (curr_state)
				B: begin
					if (in)
						curr_state <= B;
					else
						curr_state <= A;
				end
				A: begin
					if (in)
						curr_state <= A;
					else
						curr_state <= B;
				end
			endcase
		end
	end

	// Output logic
	always_comb begin
		case (curr_state)
			B: out_reg = 1'b1;
			A: out_reg = 1'b0;
		endcase
	end

	assign out = out_reg;

endmodule


Time to Generate: 11.490582704544067
Best ranked response at iteration 0 with response number 6
Rank of best response: 1.0
Best response module:
module top_module (
	input clk,
	input in,
	input areset,
	output out
);

	// State definition
	typedef enum logic [1:0] {
		B,
		A
	} state_t;

	// Register to hold current state
	reg state_t curr_state;

	// Output register
	reg out_reg;

	// State transition logic
	always_ff @(posedge clk or posedge areset) begin
		if (areset) begin
			curr_state <= B;
		end else begin
			case (curr_state)
				B: begin
					if (in)
						curr_state <= B;
					else
						curr_state <= A;
				end
				A: begin
					if (in)
						curr_state <= A;
					else
						curr_state <= B;
				end
			endcase
		end
	end

	// Output logic
	always_comb begin
		case (curr_state)
			B: out_reg = 1'b1;
			A: out_reg = 1'b0;
		endcase
	end

	assign out = out_reg;

endmodule


