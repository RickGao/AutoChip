{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// This module is a part of the FSM for controlling the shift register, we want the ability to enable the shift register for exactly 4 clock cycles whenever the proper bit pattern is detected. Whenever the FSM is reset, assert shift_ena for 4 cycles, then 0 forever (until reset). Reset should be active high synchronous.\n\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput shift_ena);'}
{'assistant': 'module top_module(
	input clk,
	input reset,
	output shift_ena);

	// Internal signal
	reg [3:0] shift_counter;

	// FSM states
	reg [1:0] state;
	parameter IDLE = 2'b00;
	parameter ENABLE = 2'b01;
	parameter DISABLE = 2'b10;

	// Initial state
	assign shift_ena = 1'b0;

	// Counter for shift_ena cycles
	always @(posedge clk, posedge reset)
	begin
		if (reset)
			shift_counter <= 4'b0;
		else if (state == ENABLE)
		begin
			if (shift_counter < 4'b1111)
				shift_counter <= shift_counter + 1'b1;
		end
	end

	// FSM transitions
	always @(posedge clk, posedge reset)
	begin
		if (reset)
			state <= IDLE;
		else if (state == IDLE)
		begin
			if (bit_pattern_detected)
				state <= ENABLE;
		end
		else if (state == ENABLE)
		begin
			if (shift_counter == 4'b1111)
				state <= DISABLE;
		end
		else if (state == DISABLE)
		begin
			state <= IDLE;
		end
	end

	// Output logic
	always @(posedge clk)
	begin
		if (reset)
			shift_ena <= 1'b0;
		else if (state == ENABLE && shift_counter < 4'b1111)
			shift_ena <= 1'b1;
		else
			shift_ena <= 1'b0;
	end

endmodule'}

 Iteration rank: -1
