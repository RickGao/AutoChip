{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\n\nmodule top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);'}
{'assistant': 'module top_module (
	input clk,
	input in,
	input areset,
	output out
);

reg state;
reg next_state;

always @(posedge clk or posedge areset) begin
	if (areset)
		state <= B;
	else
		state <= next_state;
end

always @(*) begin
	case (state)
		B: begin
			if (in == 0)
				next_state = A;
			else
				next_state = B;
		end
		A: begin
			if (in == 0)
				next_state = B;
			else
				next_state = A;
		end
	endcase
end

always @(state) begin
	if (state == B)
		out = 1;
	else
		out = 0;
end

endmodule'}

 Iteration rank: -1
