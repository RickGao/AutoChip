module top_module (
    input in,
    input [9:0] state,
    output [9:0] next_state,
    output out1,
    output out2);

    // Output wires
    wire [9:0] next;
    wire [9:0] out;
    
    // Next state logic
    always @(*) begin
        case (state)
            // S0
            10'b0000000001: next = 10'b0000000001;
            10'b0000000001: next = 10'b0000000010;
            // S1
            10'b0000000010: next = 10'b0000000001;
            10'b0000000010: next = 10'b0000000011;
            // S2
            10'b0000000011: next = 10'b0000000001;
            10'b0000000011: next = 10'b0000000100;
            // S3
            10'b0000000100: next = 10'b0000000001;
            10'b0000000100: next = 10'b0000000101;
            // S4
            10'b0000000101: next = 10'b0000000001;
            10'b0000000101: next = 10'b0000000110;
            // S5
            10'b0000000110: next = 10'b0000001000;
            10'b0000000110: next = 10'b0000000111;
            // S6
            10'b0000000111: next = 10'b0000001001;
            10'b0000000111: next = 10'b0000001000;
            // S7
            10'b0000001000: next = 10'b0000000001;
            10'b0000001000: next = 10'b0000001000;
            // S8
            10'b0000001001: next = 10'b0000000001;
            10'b0000001001: next = 10'b0000000010;
            // S9
            10'b0000001010: next = 10'b0000000001;
            10'b0000001010: next = 10'b0000000010;
        endcase
    end

    // Output logic
    always @(posedge in) begin
        case (state)
            // S0
            10'b0000000001: out = 10'b00;
            10'b0000000001: out = 10'b00;
            // S1
            10'b0000000010: out = 10'b00;
            10'b0000000010: out = 10'b00;
            // S2
            10'b0000000011: out = 10'b00;
            10'b0000000011: out = 10'b00;
            // S3
            10'b0000000100: out = 10'b00;
            10'b0000000100: out = 10'b00;
            // S4
            10'b0000000101: out = 10'b00;
            10'b0000000101: out = 10'b00;
            // S5
            10'b0000000110: out = 10'b00;
            10'b0000000110: out = 10'b00;
            // S6
            10'b0000000111: out = 10'b00;
            10'b0000000111: out = 10'b00;
            // S7
            10'b0000001000: out = 10'b01;
            10'b0000001000: out = 10'b01;
            // S8
            10'b0000001001: out = 10'b10;
            10'b0000001001: out = 10'b10;
            // S9
            10'b0000001010: out = 10'b11;
            10'b0000001010: out = 10'b11;
        endcase
    end

    assign next_state = next;
    assign out1 = out[0];
    assign out2 = out[1];
endmodule
