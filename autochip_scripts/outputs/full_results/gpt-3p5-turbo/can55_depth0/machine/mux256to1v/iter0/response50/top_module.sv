module top_module (
  input [1023:0] in,
  input [7:0] sel,
  output reg [3:0] out
);

always @(sel)
begin
  case(sel)
    8'b00000000: out = in[3:0];
    8'b00000001: out = in[7:4];
    8'b00000010: out = in[11:8];
    8'b00000011: out = in[15:12];
    8'b00000100: out = in[19:16];
    8'b00000101: out = in[23:20];
    8'b00000110: out = in[27:24];
    8'b00000111: out = in[31:28];
    8'b00001000: out = in[35:32];
    8'b00001001: out = in[39:36];
    8'b00001010: out = in[43:40];
    8'b00001011: out = in[47:44];
    8'b00001100: out = in[51:48];
    8'b00001101: out = in[55:52];
    8'b00001110: out = in[59:56];
    8'b00001111: out = in[63:60];
    8'b00010000: out = in[67:64];
    8'b00010001: out = in[71:68];
    8'b00010010: out = in[75:72];
    8'b00010011: out = in[79:76];
    8'b00010100: out = in[83:80];
    8'b00010101: out = in[87:84];
    8'b00010110: out = in[91:88];
    8'b00010111: out = in[95:92];
    8'b00011000: out = in[99:96];
    8'b00011001: out = in[103:100];
    8'b00011010: out = in[107:104];
    8'b00011011: out = in[111:108];
    8'b00011100: out = in[115:112];
    8'b00011101: out = in[119:116];
    8'b00011110: out = in[123:120];
    8'b00011111: out = in[127:124];
    8'b00100000: out = in[131:128];
    8'b00100001: out = in[135:132];
    8'b00100010: out = in[139:136];
    8'b00100011: out = in[143:140];
    8'b00100100: out = in[147:144];
    8'b00100101: out = in[151:148];
    8'b00100110: out = in[155:152];
    8'b00100111: out = in[159:156];
    8'b00101000: out = in[163:160];
    8'b00101001: out = in[167:164];
    8'b00101010: out = in[171:168];
    8'b00101011: out = in[175:172];
    8'b00101100: out = in[179:176];
    8'b00101101: out = in[183:180];
    8'b00101110: out = in[187:184];
    8'b00101111: out = in[191:188];
    // continue the cases until 8'b11111111
    default: out = 4'b0;
  endcase
end

endmodule
