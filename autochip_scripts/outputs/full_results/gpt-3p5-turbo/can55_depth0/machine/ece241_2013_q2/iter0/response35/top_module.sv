module top_module (
	input a,
	input b,
	input c,
	input d,
	output out_sop,
	output out_pos
);

	// Output out_sop is generated by taking the logical AND of input c and d,
	// and then taking the logical OR of the result with the logical AND of
	// the logical NOT of input a, the logical NOT of input b, and input c.
	assign out_sop = (c & d) | (~a & ~b & c);

	// Wire pos0 is assigned the logical AND of inputs c, the logical OR of
	// the logical NOT of input b and input d, and the logical OR of the
	// logical NOT of input a and input b.
	wire pos0;
	assign pos0 = c & (~b | d) & (~a | b);

	// Wire pos1 is assigned the logical AND of inputs c, the logical OR of
	// the logical NOT of input a and input d.
	wire pos1;
	assign pos1 = c & (~a | d);

	// Output out_pos is assigned to the result of a ternary expression that
	// checks if pos0 and pos1 are equal, and if so, assigns out_pos to pos0,
	// otherwise assigns out_pos to 1'bx (unknown).
	assign out_pos = (pos0 == pos1) ? pos0 : 1'bx;

endmodule
