system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // The PS/2 mouse protocol sends messages that are three bytes long. However, within a continuous byte stream, it's not obvious where messages start and end. The only indication is that the first byte of each three byte message always has in[3]=1 (but in[3] of the other two bytes may be 1 or 0 depending on data). We want a finite state machine that will search for message boundaries when given an input byte stream. The algorithm we'll use is to discard bytes until we see one with in[3]=1. We then assume that this is byte 1 of a message, and signal the receipt of a message once all 3 bytes have been received (done). The FSM should signal done in the cycle immediately after the third byte of each message was successfully received. Reset should be active high synchronous.

module top_module (
	input clk,
	input [7:0] in,
	input reset,
	output done
);
assistant: module top_module (
	input clk,
	input [7:0] in,
	input reset,
	output done
);
	reg [2:0] state;

	always @(posedge clk or posedge reset) begin
		if (reset) begin
			state <= 0;
		end else begin
			case(state)
				0: begin
					if (in[3] == 1) begin
						state <= 1;
					end else begin
						state <= 0;
					end
				end
				1: begin
					state <= 2;
				end
				2: begin
					state <= 3;
				end
				3: begin
					state <= 0;
				end
				default: state <= 0;
			endcase
		end
	end

	assign done = (state == 3);
endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/fsm_ps2/fsm_ps2_tb.sv:47: $finish called at 2001 (1ps)
Hint: Output 'done' has 69 mismatches. First mismatch occurred at time 240.
Hint: Total mismatched samples is 69 out of 400 samples

Simulation finished at 2001 ps
Mismatches: 69 in 400 samples

Time to Generate: 14.154350757598877
Best ranked response at iteration 0 with response number 40
Rank of best response: 0.8275
Best response module:
module top_module (
	input clk,
	input [7:0] in,
	input reset,
	output done
);
	reg [2:0] state;

	always @(posedge clk or posedge reset) begin
		if (reset) begin
			state <= 0;
		end else begin
			case(state)
				0: begin
					if (in[3] == 1) begin
						state <= 1;
					end else begin
						state <= 0;
					end
				end
				1: begin
					state <= 2;
				end
				2: begin
					state <= 3;
				end
				3: begin
					state <= 0;
				end
				default: state <= 0;
			endcase
		end
	end

	assign done = (state == 3);
endmodule


