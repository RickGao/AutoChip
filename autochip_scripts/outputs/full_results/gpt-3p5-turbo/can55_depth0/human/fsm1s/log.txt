system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // This is a Moore state machine with two states, one input, and one output. Implement this state machine in Verilog. The reset state is B and reset is active-high synchronous.

// B (out=1) --in=0--> A
// B (out=1) --in=1--> B
// A (out=0) --in=0--> B
// A (out=0) --in=1--> A

module top_module (
	input clk,
	input in,
	input reset,
	output out
);
assistant: module top_module (
	input clk,
	input in,
	input reset,
	output reg out
);
	reg state, next_state;

	parameter B = 0;
	parameter A = 1;

	always @(posedge clk) begin
		if (reset) begin
			state <= B;
		end else begin
			state <= next_state;
		end
	end

	always @* begin
		case (state)
			B: begin
				if (in == 0) begin
					next_state = A;
				end else begin
					next_state = B;
				end
				out = 1;
			end
			A: begin
				if (in == 0) begin
					next_state = B;
				end else begin
					next_state = A;
				end
				out = 0;
			end
		endcase
	end

endmodule


Time to Generate: 12.266475200653076
Best ranked response at iteration 0 with response number 10
Rank of best response: 1.0
Best response module:
module top_module (
	input clk,
	input in,
	input reset,
	output reg out
);
	reg state, next_state;

	parameter B = 0;
	parameter A = 1;

	always @(posedge clk) begin
		if (reset) begin
			state <= B;
		end else begin
			state <= next_state;
		end
	end

	always @* begin
		case (state)
			B: begin
				if (in == 0) begin
					next_state = A;
				end else begin
					next_state = B;
				end
				out = 1;
			end
			A: begin
				if (in == 0) begin
					next_state = B;
				end else begin
					next_state = A;
				end
				out = 0;
			end
		endcase
	end

endmodule


