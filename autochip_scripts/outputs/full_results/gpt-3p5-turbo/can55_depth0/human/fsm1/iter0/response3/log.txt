{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Consider the follow Moore machine with the diagram described below:\n\n// B (1) --0--> A\n// B (1) --1--> B\n// A (0) --0--> B\n// A (0) --1--> A\n\n// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.\n\nmodule top_module (\n\tinput clk,\n\tinput in,\n\tinput areset,\n\toutput out\n);'}
{'assistant': 'module top_module (
	input clk,
	input in,
	input areset,
	output out
);

// Define state types
typedef enum {
	B,
	A
} state_t;

// Declare state register
reg [1:0] state_reg;

// Declare output register
reg out_reg;

// Next State logic
always @(posedge clk or posedge areset) begin
	if (areset)
		state_reg <= B;
	else begin
		case (state_reg)
			B: begin
				if (in)
					state_reg <= B;
				else
					state_reg <= A;
			end
			A: begin
				if (in)
					state_reg <= A;
				else
					state_reg <= B;
			end
		endcase
	end
end

// Output logic
always @(state_reg) begin
	case (state_reg)
		B: out_reg = 1;
		A: out_reg = 0;
	endcase
end

// Assign output
assign out = out_reg;

endmodule'}

 Iteration rank: 1.0
