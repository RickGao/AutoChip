{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': 'module top_module (
  input clk,
  input areset,
  input bump_left,
  input bump_right,
  output reg walk_left,
  output reg walk_right
);

  // State declaration
  reg [1:0] state;

  // State encoding
  parameter [1:0]
    WALK_LEFT = 2'b00,
    WALK_RIGHT = 2'b01;

  // Output declaration
  wire walk_left_out;
  wire walk_right_out;

  // Output logic
  assign walk_left_out = (state == WALK_LEFT);
  assign walk_right_out = (state == WALK_RIGHT);

  // State output assignment
  always @(posedge clk or posedge areset)
    if (areset)
      state <= WALK_LEFT;
    else begin
      case (state)
        WALK_LEFT:
          if (bump_right)
            state <= WALK_RIGHT;
        WALK_RIGHT:
          if (bump_left)
            state <= WALK_LEFT;
      endcase
    end

  // Assigning walk_left and walk_right outputs
  always @(walk_left_out or walk_right_out)
    if (walk_left_out)
      walk_left = 1;
    else
      walk_left = 0;

  always @(walk_left_out or walk_right_out)
    if (walk_right_out)
      walk_right = 1;
    else
      walk_right = 0;

endmodule'}

 Iteration rank: 0.18777292576419213
