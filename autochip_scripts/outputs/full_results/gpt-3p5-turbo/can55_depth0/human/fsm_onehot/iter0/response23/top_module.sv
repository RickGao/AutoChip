module top_module (
	input in,
	input [9:0] state,
	output [9:0] next_state,
	output out1,
	output out2);

	// Logic for state transition
	always @(state, in) begin
		case(state)
			10'b1_000_000_000: next_state = 10'b1_000_000_000; // S0 (0, 0) --0--> S0
			10'b1_000_000_000: next_state = (in == 1) ? 10'b1_000_000_001 : 10'b1_000_000_000; // S0 (0, 0) --1--> S1
			10'b0_100_000_000: next_state = (in == 0) ? 10'b1_000_000_000 : 10'b1_000_000_000; // S1 (0, 0) --0--> S0
			10'b0_100_000_000: next_state = (in == 1) ? 10'b0_010_000_000 : 10'b1_000_000_000; // S1 (0, 0) --1--> S2
			10'b0_010_000_000: next_state = (in == 0) ? 10'b1_000_000_000 : 10'b1_000_000_000; // S2 (0, 0) --0--> S0
			10'b0_010_000_000: next_state = (in == 1) ? 10'b0_000_100_000 : 10'b1_000_000_000; // S2 (0, 0) --1--> S3
			10'b0_000_100_000: next_state = (in == 0) ? 10'b1_000_000_000 : 10'b1_000_000_000; // S3 (0, 0) --0--> S0
			10'b0_000_100_000: next_state = (in == 1) ? 10'b0_000_001_000 : 10'b1_000_000_000; // S3 (0, 0) --1--> S4
			10'b0_000_001_000: next_state = (in == 0) ? 10'b1_000_000_000 : 10'b0_000_000_001; // S4 (0, 0) --0--> S0
			10'b0_000_001_000: next_state = (in == 1) ? 10'b0_000_000_100 : 10'b1_000_000_000; // S4 (0, 0) --1--> S5
			10'b0_000_000_100: next_state = (in == 0) ? 10'b0_000_000_001 : 10'b0_000_000_001; // S5 (0, 0) --0--> S8
			10'b0_000_000_100: next_state = (in == 1) ? 10'b0_000_000_010 : 10'b1_000_000_000; // S5 (0, 0) --1--> S6
			10'b0_000_000_010: next_state = (in == 0) ? 10'b0_000_000_010 : 10'b0_001_000_000; // S6 (0, 0) --0--> S9
			10'b0_000_000_010: next_state = (in == 1) ? 10'b0_000_000_100 : 10'b0_010_000_000; // S6 (0, 0) --1--> S7
			10'b0_000_000_001: next_state = (state[9] == 0) ? 10'b1_000_000_000 : 10'b0_000_000_001; // S7 (0, 1) --0--> S0
			10'b0_000_000_001: next_state = (state[9] == 1) ? 10'b0_000_000_001 : 10'b0_000_000_001; // S7 (0, 1) --1--> S7
			10'b1_000_000_000: next_state = (state[8] == 1) ? 10'b1_000_000_001 : 10'b1_000_000_000; // S8 (1, 0) --0--> S0
			10'b1_000_000_000: next_state = (state[8] == 0) ? 10'b1_000_000_001 : 10'b0_100_000_000; // S8 (1, 0) --1--> S1
			10'b0_001_000_000: next_state = (state[9:8] == 2'b01) ? 10'b1_000_000_001 : 10'b0_100_000_000; // S9 (1, 1) --0--> S0
			10'b0_001_000_000: next_state = (state[9:8] == 2'b10) ? 10'b0_100_000_000 : 10'b1_000_000_001; // S9 (1, 1) --1--> S1
			default: next_state = 10'b1_000_000_000; // Default to S0
		endcase
	end

	// Logic for outputs
	always @(state) begin
		case(state)
			10'b1_000_000_000: begin out1 = 0; out2 = 0; end // S0 (0, 0)
			10'b1_000_000_001: begin out1 = 0; out2 = 0; end // S1 (0, 0)
			10'b0_100_000_000: begin out1 = 0; out2 = 0; end // S2 (0, 0)
			10'b0_010_000_000: begin out1 = 0; out2 = 0; end // S3 (0, 0)
			10'b0_000_100_000: begin out1 = 0; out2 = 0; end // S4 (0, 0)
			10'b0_000_001_000: begin out1 = 0; out2 = 0; end // S5 (0, 0)
			10'b0_000_000_001: begin out1 = 0; out2 = 1; end // S6 (0, 0)
			10'b0_000_000_010: begin out1 = 0; out2 = 0; end // S7 (0, 1)
			10'b0_000_000_100: begin out1 = 1; out2 = 0; end // S8 (1, 0)
			10'b0_001_000_000: begin out1 = 1; out2 = 1; end // S9 (1, 1)
			default: begin out1 = 0; out2 = 0; end // Default to zeros
		endcase
	end
	
endmodule
