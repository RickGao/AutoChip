system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Consider the follow Moore machine with the diagram described below:

// B (1) --0--> A
// B (1) --1--> B
// A (0) --0--> B
// A (0) --1--> A

// Write Verilog implementing this state machine. It should asynchronously reset into state B if reset if high.

module top_module (
	input clk,
	input in,
	input areset,
	output out
);
assistant: module top_module (
    input clk,
    input in,
    input areset,
    output reg out
);

localparam A = 1'b0, B = 1'b1;
reg state, next_state;

always @(*) begin
    case (state)
        B: begin
            if (in) next_state = B;
            else next_state = A;
        end
        A: begin
            if (in) next_state = A;
            else next_state = B;
        end
        default: next_state = B;
    endcase
end

always @(posedge clk, posedge areset) begin
    if (areset)
        state <= B;
    else
        state <= next_state;
end

always @(state) begin
    case (state)
        A: out = 0;
        B: out = 1;
        default: out = 0;
    endcase
end

endmodule


Time to Generate: 12.149474859237671
Best ranked response at iteration 0 with response number 1
Rank of best response: 1.0
Best response module:
module top_module (
    input clk,
    input in,
    input areset,
    output reg out
);

localparam A = 1'b0, B = 1'b1;
reg state, next_state;

always @(*) begin
    case (state)
        B: begin
            if (in) next_state = B;
            else next_state = A;
        end
        A: begin
            if (in) next_state = A;
            else next_state = B;
        end
        default: next_state = B;
    endcase
end

always @(posedge clk, posedge areset) begin
    if (areset)
        state <= B;
    else
        state <= next_state;
end

always @(state) begin
    case (state)
        A: out = 0;
        B: out = 1;
        default: out = 0;
    endcase
end

endmodule


