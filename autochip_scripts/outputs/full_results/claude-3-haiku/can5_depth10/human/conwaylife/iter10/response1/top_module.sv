module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);

reg [255:0] next_q;

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end
    else begin
        q <= next_q;
    end
end

always @(*) begin
    next_q[255:240] = ((q[254:240] & {16{q[255]}}) | (q[255:240] & ~(q[254:240] | {16{q[255]}}))) & 16'h3333;
    next_q[239:224] = ((q[238:224] & {16{q[239]}}) | (q[239:224] & ~(q[238:224] | {16{q[239]}}))) & 16'h3333;
    next_q[223:208] = ((q[222:208] & {16{q[223]}}) | (q[223:208] & ~(q[222:208] | {16{q[223]}}))) & 16'h3333;
    next_q[207:192] = ((q[206:192] & {16{q[207]}}) | (q[207:192] & ~(q[206:192] | {16{q[207]}}))) & 16'h3333;
    next_q[191:176] = ((q[190:176] & {16{q[191]}}) | (q[191:176] & ~(q[190:176] | {16{q[191]}}))) & 16'h3333;
    next_q[175:160] = ((q[174:160] & {16{q[175]}}) | (q[175:160] & ~(q[174:160] | {16{q[175]}}))) & 16'h3333;
    next_q[159:144] = ((q[158:144] & {16{q[159]}}) | (q[159:144] & ~(q[158:144] | {16{q[159]}}))) & 16'h3333;
    next_q[143:128] = ((q[142:128] & {16{q[143]}}) | (q[143:128] & ~(q[142:128] | {16{q[143]}}))) & 16'h3333;
    next_q[127:112] = ((q[126:112] & {16{q[127]}}) | (q[127:112] & ~(q[126:112] | {16{q[127]}}))) & 16'h3333;
    next_q[111:96] = ((q[110:96] & {16{q[111]}}) | (q[111:96] & ~(q[110:96] | {16{q[111]}}))) & 16'h3333;
    next_q[95:80] = ((q[94:80] & {16{q[95]}}) | (q[95:80] & ~(q[94:80] | {16{q[95]}}))) & 16'h3333;
    next_q[79:64] = ((q[78:64] & {16{q[79]}}) | (q[79:64] & ~(q[78:64] | {16{q[79]}}))) & 16'h3333;
    next_q[63:48] = ((q[62:48] & {16{q[63]}}) | (q[63:48] & ~(q[62:48] | {16{q[63]}}))) & 16'h3333;
    next_q[47:32] = ((q[46:32] & {16{q[47]}}) | (q[47:32] & ~(q[46:32] | {16{q[47]}}))) & 16'h3333;
    next_q[31:16] = ((q[30:16] & {16{q[31]}}) | (q[31:16] & ~(q[30:16] | {16{q[31]}}))) & 16'h3333;
    next_q[15:0] = ((q[14:0] & {16{q[15]}}) | (q[15:0] & ~(q[14:0] | {16{q[15]}}))) & 16'h3333;
end

endmodule
