module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);

reg [255:0] next_q;

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end
    else begin
        q <= next_q;
    end
end

always @(*) begin
    next_q[255:240] = ((q[255:241] & {16{q[240]}}) | (q[255:240] & ~(q[255:241] | {16{q[240]}}))) & 16'hFFFF;
    next_q[239:224] = ((q[239:225] & {16{q[224]}}) | (q[239:224] & ~(q[239:225] | {16{q[224]}}))) & 16'hFFFF;
    next_q[223:208] = ((q[223:209] & {16{q[208]}}) | (q[223:208] & ~(q[223:209] | {16{q[208]}}))) & 16'hFFFF;
    next_q[207:192] = ((q[207:193] & {16{q[192]}}) | (q[207:192] & ~(q[207:193] | {16{q[192]}}))) & 16'hFFFF;
    next_q[191:176] = ((q[191:177] & {16{q[176]}}) | (q[191:176] & ~(q[191:177] | {16{q[176]}}))) & 16'hFFFF;
    next_q[175:160] = ((q[175:161] & {16{q[160]}}) | (q[175:160] & ~(q[175:161] | {16{q[160]}}))) & 16'hFFFF;
    next_q[159:144] = ((q[159:145] & {16{q[144]}}) | (q[159:144] & ~(q[159:145] | {16{q[144]}}))) & 16'hFFFF;
    next_q[143:128] = ((q[143:129] & {16{q[128]}}) | (q[143:128] & ~(q[143:129] | {16{q[128]}}))) & 16'hFFFF;
    next_q[127:112] = ((q[127:113] & {16{q[112]}}) | (q[127:112] & ~(q[127:113] | {16{q[112]}}))) & 16'hFFFF;
    next_q[111:96] = ((q[111:97] & {16{q[96]}}) | (q[111:96] & ~(q[111:97] | {16{q[96]}}))) & 16'hFFFF;
    next_q[95:80] = ((q[95:81] & {16{q[80]}}) | (q[95:80] & ~(q[95:81] | {16{q[80]}}))) & 16'hFFFF;
    next_q[79:64] = ((q[79:65] & {16{q[64]}}) | (q[79:64] & ~(q[79:65] | {16{q[64]}}))) & 16'hFFFF;
    next_q[63:48] = ((q[63:49] & {16{q[48]}}) | (q[63:48] & ~(q[63:49] | {16{q[48]}}))) & 16'hFFFF;
    next_q[47:32] = ((q[47:33] & {16{q[32]}}) | (q[47:32] & ~(q[47:33] | {16{q[32]}}))) & 16'hFFFF;
    next_q[31:16] = ((q[31:17] & {16{q[16]}}) | (q[31:16] & ~(q[31:17] | {16{q[16]}}))) & 16'hFFFF;
    next_q[15:0] = ((q[14:0] & {16{q[0]}}) | (q[15:0] & ~(q[14:0] | {16{q[0]}}))) & 16'hFFFF;
end

endmodule
