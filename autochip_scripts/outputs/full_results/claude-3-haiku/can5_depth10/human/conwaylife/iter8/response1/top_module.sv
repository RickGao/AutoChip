module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);

reg [255:0] next_q;

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end
    else begin
        q <= next_q;
    end
end

always @(*) begin
    next_q[255:240] = ((q[239:225] & {16{q[255]}}) | (q[255:241] & ~(q[239:225] | {16{q[255]}}))) & 16'hFFFF;
    next_q[239:224] = ((q[223:209] & {16{q[239]}}) | (q[239:225] & ~(q[223:209] | {16{q[239]}}))) & 16'hFFFF;
    next_q[223:208] = ((q[207:193] & {16{q[223]}}) | (q[223:209] & ~(q[207:193] | {16{q[223]}}))) & 16'hFFFF;
    next_q[207:192] = ((q[191:177] & {16{q[207]}}) | (q[207:193] & ~(q[191:177] | {16{q[207]}}))) & 16'hFFFF;
    next_q[191:176] = ((q[175:161] & {16{q[191]}}) | (q[191:177] & ~(q[175:161] | {16{q[191]}}))) & 16'hFFFF;
    next_q[175:160] = ((q[159:145] & {16{q[175]}}) | (q[175:161] & ~(q[159:145] | {16{q[175]}}))) & 16'hFFFF;
    next_q[159:144] = ((q[143:129] & {16{q[159]}}) | (q[159:145] & ~(q[143:129] | {16{q[159]}}))) & 16'hFFFF;
    next_q[143:128] = ((q[127:113] & {16{q[143]}}) | (q[143:129] & ~(q[127:113] | {16{q[143]}}))) & 16'hFFFF;
    next_q[127:112] = ((q[111:97] & {16{q[127]}}) | (q[127:113] & ~(q[111:97] | {16{q[127]}}))) & 16'hFFFF;
    next_q[111:96] = ((q[95:81] & {16{q[111]}}) | (q[111:97] & ~(q[95:81] | {16{q[111]}}))) & 16'hFFFF;
    next_q[95:80] = ((q[79:65] & {16{q[95]}}) | (q[95:81] & ~(q[79:65] | {16{q[95]}}))) & 16'hFFFF;
    next_q[79:64] = ((q[63:49] & {16{q[79]}}) | (q[79:65] & ~(q[63:49] | {16{q[79]}}))) & 16'hFFFF;
    next_q[63:48] = ((q[47:33] & {16{q[63]}}) | (q[63:49] & ~(q[47:33] | {16{q[63]}}))) & 16'hFFFF;
    next_q[47:32] = ((q[31:17] & {16{q[47]}}) | (q[47:33] & ~(q[31:17] | {16{q[47]}}))) & 16'hFFFF;
    next_q[31:16] = ((q[15:1] & {16{q[31]}}) | (q[31:17] & ~(q[15:1] | {16{q[31]}}))) & 16'hFFFF;
    next_q[15:0] = ((q[255:241] & {16{q[15]}}) | (q[15:1] & ~(q[255:241] | {16{q[15]}}))) & 16'hFFFF;
end

endmodule
