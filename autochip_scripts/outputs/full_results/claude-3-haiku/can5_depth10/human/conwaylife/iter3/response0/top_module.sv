module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);

reg [255:0] next_q;

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end
    else begin
        q <= next_q;
    end
end

always @(*) begin
    // Compute the next state of the game
    next_q[255:240] = (q[254:240] & q[15:0]) | (q[255:240] & ~(q[254:240] | q[15:0]));
    next_q[239:224] = (q[238:224] & q[31:16]) | (q[239:224] & ~(q[238:224] | q[31:16]));
    next_q[223:208] = (q[222:208] & q[47:32]) | (q[223:208] & ~(q[222:208] | q[47:32]));
    next_q[207:192] = (q[206:192] & q[63:48]) | (q[207:192] & ~(q[206:192] | q[63:48]));
    next_q[191:176] = (q[190:176] & q[79:64]) | (q[191:176] & ~(q[190:176] | q[79:64]));
    next_q[175:160] = (q[174:160] & q[95:80]) | (q[175:160] & ~(q[174:160] | q[95:80]));
    next_q[159:144] = (q[158:144] & q[111:96]) | (q[159:144] & ~(q[158:144] | q[111:96]));
    next_q[143:128] = (q[142:128] & q[127:112]) | (q[143:128] & ~(q[142:128] | q[127:112]));
    next_q[127:112] = (q[126:112] & q[143:128]) | (q[127:112] & ~(q[126:112] | q[143:128]));
    next_q[111:96] = (q[110:96] & q[159:144]) | (q[111:96] & ~(q[110:96] | q[159:144]));
    next_q[95:80] = (q[94:80] & q[175:160]) | (q[95:80] & ~(q[94:80] | q[175:160]));
    next_q[79:64] = (q[78:64] & q[191:176]) | (q[79:64] & ~(q[78:64] | q[191:176]));
    next_q[63:48] = (q[62:48] & q[207:192]) | (q[63:48] & ~(q[62:48] | q[207:192]));
    next_q[47:32] = (q[46:32] & q[223:208]) | (q[47:32] & ~(q[46:32] | q[223:208]));
    next_q[31:16] = (q[30:16] & q[239:224]) | (q[31:16] & ~(q[30:16] | q[239:224]));
    next_q[15:0] = (q[14:0] & q[255:240]) | (q[15:0] & ~(q[14:0] | q[255:240]));
end

endmodule
