module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);

reg [255:0] next_q;

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end
    else begin
        q <= next_q;
    end
end

always @(*) begin
    next_q[255:240] = ((q[255:240] & {16{q[254]}}) | (q[239:224] & ~(q[255:240] | {16{q[254]}}))) & 16'hFFFF;
    next_q[239:224] = ((q[239:224] & {16{q[238]}}) | (q[223:208] & ~(q[239:224] | {16{q[238]}}))) & 16'hFFFF;
    next_q[223:208] = ((q[223:208] & {16{q[222]}}) | (q[207:192] & ~(q[223:208] | {16{q[222]}}))) & 16'hFFFF;
    next_q[207:192] = ((q[207:192] & {16{q[206]}}) | (q[191:176] & ~(q[207:192] | {16{q[206]}}))) & 16'hFFFF;
    next_q[191:176] = ((q[191:176] & {16{q[190]}}) | (q[175:160] & ~(q[191:176] | {16{q[190]}}))) & 16'hFFFF;
    next_q[175:160] = ((q[175:160] & {16{q[174]}}) | (q[159:144] & ~(q[175:160] | {16{q[174]}}))) & 16'hFFFF;
    next_q[159:144] = ((q[159:144] & {16{q[158]}}) | (q[143:128] & ~(q[159:144] | {16{q[158]}}))) & 16'hFFFF;
    next_q[143:128] = ((q[143:128] & {16{q[142]}}) | (q[127:112] & ~(q[143:128] | {16{q[142]}}))) & 16'hFFFF;
    next_q[127:112] = ((q[127:112] & {16{q[126]}}) | (q[111:96] & ~(q[127:112] | {16{q[126]}}))) & 16'hFFFF;
    next_q[111:96] = ((q[111:96] & {16{q[110]}}) | (q[95:80] & ~(q[111:96] | {16{q[110]}}))) & 16'hFFFF;
    next_q[95:80] = ((q[95:80] & {16{q[94]}}) | (q[79:64] & ~(q[95:80] | {16{q[94]}}))) & 16'hFFFF;
    next_q[79:64] = ((q[79:64] & {16{q[78]}}) | (q[63:48] & ~(q[79:64] | {16{q[78]}}))) & 16'hFFFF;
    next_q[63:48] = ((q[63:48] & {16{q[62]}}) | (q[47:32] & ~(q[63:48] | {16{q[62]}}))) & 16'hFFFF;
    next_q[47:32] = ((q[47:32] & {16{q[46]}}) | (q[31:16] & ~(q[47:32] | {16{q[46]}}))) & 16'hFFFF;
    next_q[31:16] = ((q[31:16] & {16{q[30]}}) | (q[15:0] & ~(q[31:16] | {16{q[30]}}))) & 16'hFFFF;
    next_q[15:0] = ((q[15:0] & {16{q[14]}}) | (q[255:240] & ~(q[15:0] | {16{q[14]}}))) & 16'hFFFF;
end

endmodule
