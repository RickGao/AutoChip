module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);

reg [255:0] next_q;

always @(posedge clk) begin
    if (load) begin
        q <= data;
    end
    else begin
        q <= next_q;
    end
end

always @(*) begin
    // Compute the next state of the game
    next_q[255:240] = (q[254:240] & {16{~(q[255:241] & q[239:225] & q[223:209])}} & (q[255:241] | q[239:225] | q[223:209])) |
                     (~(q[254:240] & q[239:225] & q[223:209]) & q[255:241]);
    next_q[239:224] = (q[238:224] & {16{~(q[254:240] & q[222:208] & q[206:192])}} & (q[254:240] | q[222:208] | q[206:192])) |
                     (~(q[238:224] & q[254:240] & q[222:208]) & q[254:240]);
    next_q[223:208] = (q[222:208] & {16{~(q[238:224] & q[192:178] & q[176:162])}} & (q[238:224] | q[192:178] | q[176:162])) |
                     (~(q[222:208] & q[238:224] & q[192:178]) & q[238:224]);
    next_q[207:192] = (q[206:192] & {16{~(q[222:208] & q[178:164] & q[162:148])}} & (q[222:208] | q[178:164] | q[162:148])) |
                     (~(q[206:192] & q[222:208] & q[178:164]) & q[222:208]);
    next_q[191:176] = (q[190:176] & {16{~(q[206:192] & q[164:150] & q[148:134])}} & (q[206:192] | q[164:150] | q[148:134])) |
                     (~(q[190:176] & q[206:192] & q[164:150]) & q[206:192]);
    next_q[175:160] = (q[174:160] & {16{~(q[190:176] & q[150:136] & q[134:120])}} & (q[190:176] | q[150:136] | q[134:120])) |
                     (~(q[174:160] & q[190:176] & q[150:136]) & q[190:176]);
    next_q[159:144] = (q[158:144] & {16{~(q[174:160] & q[136:122] & q[120:106])}} & (q[174:160] | q[136:122] | q[120:106])) |
                     (~(q[158:144] & q[174:160] & q[136:122]) & q[174:160]);
    next_q[143:128] = (q[142:128] & {16{~(q[158:144] & q[122:108] & q[106:92])}} & (q[158:144] | q[122:108] | q[106:92])) |
                     (~(q[142:128] & q[158:144] & q[122:108]) & q[158:144]);
    next_q[127:112] = (q[126:112] & {16{~(q[142:128] & q[108:94] & q[92:78])}} & (q[142:128] | q[108:94] | q[92:78])) |
                     (~(q[126:112] & q[142:128] & q[108:94]) & q[142:128]);
    next_q[111:96] = (q[110:96] & {16{~(q[126:112] & q[94:80] & q[78:64])}} & (q[126:112] | q[94:80] | q[78:64])) |
                    (~(q[110:96] & q[126:112] & q[94:80]) & q[126:112]);
    next_q[95:80] = (q[94:80] & {16{~(q[110:96] & q[80:66] & q[64:50])}} & (q[110:96] | q[80:66] | q[64:50])) |
                   (~(q[94:80] & q[110:96] & q[80:66]) & q[110:96]);
    next_q[79:64] = (q[78:64] & {16{~(q[94:80] & q[66:52] & q[50:36])}} & (q[94:80] | q[66:52] | q[50:36])) |
                   (~(q[78:64] & q[94:80] & q[66:52]) & q[94:80]);
    next_q[63:48] = (q[62:48] & {16{~(q[78:64] & q[52:38] & q[36:22])}} & (q[78:64] | q[52:38] | q[36:22])) |
                   (~(q[62:48] & q[78:64] & q[52:38]) & q[78:64]);
    next_q[47:32] = (q[46:32] & {16{~(q[62:48] & q[38:24] & q[22:8])}} & (q[62:48] | q[38:24] | q[22:8])) |
                   (~(q[46:32] & q[62:48] & q[38:24]) & q[62:48]);
    next_q[31:16] = (q[30:16] & {16{~(q[46:32] & q[24:10] & q[8:0])}} & (q[46:32] | q[24:10] | q[8:0])) |
                   (~(q[30:16] & q[46:32] & q[24:10]) & q[46:32]);
    next_q[15:0] = (q[14:0] & {16{~(q[30:16] & q[10:1] & q[255:241])}} & (q[30:16] | q[10:1] | q[255:241])) |
                  (~(q[14:0] & q[30:16] & q[10:1]) & q[30:16]);
end

endmodule
