{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': '```verilog
module top_module (
    input clk,
    input areset,
    input bump_left,
    input bump_right,
    output walk_left,
    output walk_right
);

parameter LEFT = 1'b0, RIGHT = 1'b1;
reg state, next_state;

always @(posedge clk, posedge areset) begin
    if (areset)
        state <= LEFT;
    else
        state <= next_state;
end

always @(*) begin
    case (state)
        LEFT: begin
            if (bump_left)
                next_state = RIGHT;
            else
                next_state = LEFT;
        end
        RIGHT: begin
            if (bump_right)
                next_state = LEFT;
            else
                next_state = RIGHT;
        end
        default:
            next_state = LEFT;
    endcase
end

assign walk_left = (state == LEFT);
assign walk_right = (state == RIGHT);

endmodule
```

The provided Verilog module correctly implements a Moore state machine that models the behavior of the Lemmings game as described in the problem statement.

The module has two states, `LEFT` and `RIGHT`, which represent the Lemming walking left or right, respectively. The state is updated on the positive edge of the clock, and the module is reset to the `LEFT` state when the `areset` signal is high.

The `next_state` logic determines the next state based on the current state and the `bump_left` and `bump_right` inputs. If the Lemming is walking left (`state == LEFT`) and is bumped on the left (`bump_left`), the next state is set to `RIGHT`. Similarly, if the Lemming is walking right (`state == RIGHT`) and is bumped on the right (`bump_right`), the next state is set to `LEFT`.

The `walk_left` and `walk_right` outputs are assigned based on the current state, indicating whether the Lemming is walking left or right, respectively.'}

 Iteration rank: 1.0
