{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Build a counter that counts from 0 to 999, inclusive, with a period of 1000 cycles. The reset input is active high synchronous, and should reset the counter to 0.\n\nmodule top_module(\n\tinput clk,\n\tinput reset,\n\toutput reg [9:0] q);'}
{'assistant': '```verilog
module top_module(
    input clk,
    input reset,
    output reg [9:0] q
);

always @(posedge clk) begin
    if (reset) begin
        q <= 0;
    end else begin
        if (q == 10'd999) begin
            q <= 0;
        end else begin
            q <= q + 1;
        end
    end
end

endmodule
```

The provided Verilog module specification is correct and can be implemented as shown. Here's the completed Verilog module:

1. The module has three ports: `clk` (clock input), `reset` (reset input), and `q` (10-bit output).
2. The module uses a `always` block that triggers on the positive edge of the clock signal.
3. Inside the `always` block, the code checks if the `reset` signal is high. If so, it resets the counter `q` to 0.
4. If `reset` is not high, the code checks if the counter `q` has reached the maximum value of 999 (10'd999). If so, it resets `q` to 0.
5. If `q` has not reached the maximum value, it increments `q` by 1.

This implementation ensures that the counter counts from 0 to 999, inclusive, with a period of 1000 cycles, and resets to 0 when the `reset` input is active high.'}

 Iteration rank: 1.0
