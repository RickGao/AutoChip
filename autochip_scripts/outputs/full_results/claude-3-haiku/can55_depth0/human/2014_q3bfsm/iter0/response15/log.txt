{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Given the state-assigned table shown below, implement the finite-state machine. Reset should synchronous active high reset the FSM to state 000.\n\n// Present state y[2:0] | Next state y[2:0] x=0, Next state y[2:0] x=1, Output z\n// 000 | 000, 001 | 0\n// 001 | 001, 100 | 0\n// 010 | 010, 001 | 0\n// 011 | 001, 010 | 1\n// 100 | 011, 100 | 1\n\n\nmodule top_module (\n\tinput clk,\n\tinput reset,\n\tinput x,\n\toutput reg z\n);'}
{'assistant': '```verilog
module top_module (
    input clk,
    input reset,
    input x,
    output reg z
);

reg [2:0] present_state, next_state;

always @(posedge clk) begin
    if (reset) begin
        present_state <= 3'b000;
    end
    else begin
        present_state <= next_state;
    end
end

always @(*) begin
    case (present_state)
        3'b000: begin
            if (x == 0) begin
                next_state = 3'b000;
                z = 0;
            end
            else begin
                next_state = 3'b001;
                z = 0;
            end
        end
        3'b001: begin
            if (x == 0) begin
                next_state = 3'b001;
                z = 0;
            end
            else begin
                next_state = 3'b100;
                z = 0;
            end
        end
        3'b010: begin
            if (x == 0) begin
                next_state = 3'b010;
                z = 0;
            end
            else begin
                next_state = 3'b001;
                z = 0;
            end
        end
        3'b011: begin
            if (x == 0) begin
                next_state = 3'b001;
                z = 1;
            end
            else begin
                next_state = 3'b010;
                z = 1;
            end
        end
        3'b100: begin
            if (x == 0) begin
                next_state = 3'b011;
                z = 1;
            end
            else begin
                next_state = 3'b100;
                z = 1;
            end
        end
        default: begin
            next_state = 3'b000;
            z = 0;
        end
    endcase
end

endmodule
```

The provided Verilog module correctly implements the finite-state machine described in the problem statement. The module has the following features:

1. The `present_state` and `next_state` registers are used to store the current and next states of the FSM, respectively.
2. The `always` block with the `posedge clk` condition updates the `present_state` register based on the `next_state` value, and also handles the synchronous reset.
3. The `always` block with the `(*)` condition implements the state transition logic based on the current state and the input `x`.
4. The output `z` is assigned the appropriate value based on the current state and the input `x`.

The module should compile and function correctly according to the given state-assigned table.'}

 Iteration rank: 1.0
