{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': '```verilog
module top_module (
    input clk,
    input areset,
    input bump_left,
    input bump_right,
    output reg walk_left,
    output reg walk_right
);

reg state;
parameter LEFT = 1'b0, RIGHT = 1'b1;

always @(posedge clk or posedge areset) begin
    if (areset) begin
        state <= LEFT;
        walk_left <= 1'b1;
        walk_right <= 1'b0;
    end
    else begin
        case (state)
            LEFT: begin
                if (bump_left) begin
                    state <= RIGHT;
                    walk_left <= 1'b0;
                    walk_right <= 1'b1;
                end
                else begin
                    walk_left <= 1'b1;
                    walk_right <= 1'b0;
                end
            end
            RIGHT: begin
                if (bump_right) begin
                    state <= LEFT;
                    walk_left <= 1'b1;
                    walk_right <= 1'b0;
                end
                else begin
                    walk_left <= 1'b0;
                    walk_right <= 1'b1;
                end
            end
        endcase
    end
end

endmodule
```

This Verilog module implements the Lemmings finite state machine as described. It has two states, `LEFT` and `RIGHT`, which correspond to the Lemming walking left and right, respectively. 

The module has the following inputs and outputs:
- `clk`: The system clock.
- `areset`: Asynchronous reset signal that sets the Lemming to walk left.
- `bump_left`: Indicates that the Lemming has hit an obstacle on the left.
- `bump_right`: Indicates that the Lemming has hit an obstacle on the right.
- `walk_left`: Output signal indicating that the Lemming is walking left.
- `walk_right`: Output signal indicating that the Lemming is walking right.

The module uses a single register `state` to keep track of the current state of the Lemming. On a positive edge of the `clk` signal or when the `areset` signal is high, the module updates the state of the Lemming and sets the `walk_left` and `walk_right` outputs accordingly.'}

 Iteration rank: 1.0
