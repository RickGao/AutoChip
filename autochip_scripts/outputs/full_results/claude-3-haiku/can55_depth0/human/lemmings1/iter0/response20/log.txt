{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': '```verilog
module top_module (
    input clk,
    input areset,
    input bump_left,
    input bump_right,
    output reg walk_left,
    output reg walk_right
);

localparam STATE_WALK_LEFT = 1'b0;
localparam STATE_WALK_RIGHT = 1'b1;

reg state, next_state;

always @(posedge clk, posedge areset) begin
    if (areset) begin
        state <= STATE_WALK_LEFT;
    end else begin
        state <= next_state;
    end
end

always @(*) begin
    next_state = state;
    case (state)
        STATE_WALK_LEFT: begin
            walk_left = 1'b1;
            walk_right = 1'b0;
            if (bump_right) begin
                next_state = STATE_WALK_RIGHT;
            end
        end
        STATE_WALK_RIGHT: begin
            walk_left = 1'b0;
            walk_right = 1'b1;
            if (bump_left) begin
                next_state = STATE_WALK_LEFT;
            end
        end
    endcase
end

endmodule
```

This Verilog module implements a Moore state machine that models the behavior of the Lemmings game as described in the problem statement. The module has two states, `STATE_WALK_LEFT` and `STATE_WALK_RIGHT`, which represent the Lemming's direction of movement. The module takes two inputs, `bump_left` and `bump_right`, which indicate if the Lemming has hit an obstacle on the left or right side, respectively. The module has two outputs, `walk_left` and `walk_right`, which indicate the Lemming's current direction of movement.

The module uses an asynchronous reset signal `areset` to reset the Lemming's state to `STATE_WALK_LEFT`. The `state` register stores the current state, and the `next_state` variable is used to determine the next state based on the current state and the input signals.

In the `always` block that updates the `state` register, the current state is updated to the `next_state` on the positive edge of the `clk` signal, or when the `areset` signal is high.

The `always` block that updates the `next_state` and the output signals `walk_left` and `walk_right` uses a `case` statement to determine the next state and the output signals based on the current state and the input signals. If the Lemming is in the `STATE_WALK_LEFT` state and the `bump_right` signal is high, the next state is set to `STATE_WALK_RIGHT`. If the Lemming is in the `STATE_WALK_RIGHT` state and the `bump_left` signal is high, the next state is set to `STATE_WALK_LEFT`.'}

 Iteration rank: 0.18777292576419213
