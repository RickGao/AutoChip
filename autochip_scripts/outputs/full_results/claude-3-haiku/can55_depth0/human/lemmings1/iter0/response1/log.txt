{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': "// The game Lemmings involves critters with fairly simple brains. So simple that we are going to model it using a finite state machine. In the Lemmings' 2D world, Lemmings can be in one of two states: walking left (walk_left is 1) or walking right (walk_right is 1). It will switch directions if it hits an obstacle. In particular, if a Lemming is bumped on the left (by receiving a 1 on bump_left), it will walk right. If it's bumped on the right (by receiving a 1 on bump_right), it will walk left. If it's bumped on both sides at the same time, it will still switch directions. Implement a Moore state machine with two states, two inputs, and one output (internal to the module) that models this behaviour. areset is positive edge triggered asynchronous reseting the Lemming machine to walk left.\n\nmodule top_module (\n\tinput clk,\n\tinput areset,\n\tinput bump_left,\n\tinput bump_right,\n\toutput walk_left,\n\toutput walk_right\n);"}
{'assistant': '```verilog
module top_module (
    input clk,
    input areset,
    input bump_left,
    input bump_right,
    output reg walk_left,
    output reg walk_right
);

localparam LEFT = 1'b0, RIGHT = 1'b1;
reg state;

always @(posedge clk, posedge areset) begin
    if (areset) begin
        state <= LEFT;
        walk_left <= 1'b1;
        walk_right <= 1'b0;
    end
    else begin
        case (state)
            LEFT: begin
                if (bump_left) begin
                    state <= RIGHT;
                    walk_left <= 1'b0;
                    walk_right <= 1'b1;
                end
                else begin
                    state <= LEFT;
                    walk_left <= 1'b1;
                    walk_right <= 1'b0;
                end
            end
            RIGHT: begin
                if (bump_right) begin
                    state <= LEFT;
                    walk_left <= 1'b1;
                    walk_right <= 1'b0;
                end
                else begin
                    state <= RIGHT;
                    walk_left <= 1'b0;
                    walk_right <= 1'b1;
                end
            end
            default: begin
                state <= LEFT;
                walk_left <= 1'b1;
                walk_right <= 1'b0;
            end
        endcase
    end
end

endmodule
```

The provided Verilog module specification describes a finite state machine that models the behavior of Lemmings in a 2D world. The module has two inputs (bump_left and bump_right) and two outputs (walk_left and walk_right) that represent the Lemming's direction of movement.

The module uses a Moore state machine with two states: LEFT and RIGHT, representing the Lemming's current direction of movement. The module also has an asynchronous reset input (areset) that resets the Lemming's state to walk left.

The module's behavior is implemented in the always block, which updates the state and output signals based on the current state and the input signals. If the Lemming is walking left and receives a bump_left signal, it switches to walking right. If the Lemming is walking right and receives a bump_right signal, it switches to walking left. If the Lemming is bumped on both sides at the same time, it still switches directions.

The default case in the case statement ensures that the module's state and outputs are initialized to walk left when the module is reset.'}

 Iteration rank: 1.0
