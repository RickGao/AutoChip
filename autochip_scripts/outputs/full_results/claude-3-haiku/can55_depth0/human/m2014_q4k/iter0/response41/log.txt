{'role': 'system', 'content': 'You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     '}
{'role': 'user', 'content': '// Implement a shift register with four D flops. Reset is active-low synchronous resettable.\n\nmodule top_module (\n\tinput clk,\n\tinput resetn,\n\tinput in,\n\toutput out\n);'}
{'assistant': '```verilog
module top_module (
    input clk,
    input resetn,
    input in,
    output out
);

    reg [3:0] shift_reg;

    always @(posedge clk) begin
        if (!resetn) begin
            shift_reg <= 4'b0000;
        end
        else begin
            shift_reg <= {shift_reg[2:0], in};
        end
    end

    assign out = shift_reg[3];

endmodule
```

The above Verilog code implements a 4-bit shift register with a synchronous active-low reset. The `shift_reg` register holds the 4-bit data, and the input `in` is shifted into the register on every positive edge of the clock. The output `out` is connected to the most significant bit of the `shift_reg`.

The `always` block handles the logic for the shift register. When the `resetn` input is low (active), the `shift_reg` is reset to `4'b0000`. Otherwise, the register is shifted left by one bit, and the input `in` is shifted into the least significant bit.'}

 Iteration rank: 1.0
