system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.

module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);
assistant: module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting
);

    parameter [2:0] S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100;
    reg [2:0] current_state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= S0;
            start_shifting <= 1'b0;
        end
        else begin
            current_state <= next_state;
        end
    end

    always @(*) begin
        case (current_state)
            S0: begin
                if (data == 1'b1)
                    next_state = S1;
                else
                    next_state = S0;
            end
            S1: begin
                if (data == 1'b1)
                    next_state = S2;
                else
                    next_state = S0;
            end
            S2: begin
                if (data == 1'b0)
                    next_state = S3;
                else
                    next_state = S0;
            end
            S3: begin
                if (data == 1'b1)
                    next_state = S4;
                else
                    next_state = S0;
            end
            S4: begin
                next_state = S4;
                start_shifting = 1'b1;
            end
            default:
                next_state = S0;
        endcase
    end

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
Hint: Your reset should be synchronous, but doesn't appear to be.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fsmseq/review2015_fsmseq_tb.sv:102: $finish called at 3216 (1ps)
Hint: Output 'start_shifting' has 30 mismatches. First mismatch occurred at time 105.
Hint: Total mismatched samples is 30 out of 643 samples

Simulation finished at 3216 ps
Mismatches: 30 in 643 samples

Time to Generate: 17.065956115722656
Best ranked response at iteration 0 with response number 4
Rank of best response: 0.9533437013996889
Best response module:
module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting
);

    parameter [2:0] S0 = 3'b000, S1 = 3'b001, S2 = 3'b010, S3 = 3'b011, S4 = 3'b100;
    reg [2:0] current_state, next_state;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= S0;
            start_shifting <= 1'b0;
        end
        else begin
            current_state <= next_state;
        end
    end

    always @(*) begin
        case (current_state)
            S0: begin
                if (data == 1'b1)
                    next_state = S1;
                else
                    next_state = S0;
            end
            S1: begin
                if (data == 1'b1)
                    next_state = S2;
                else
                    next_state = S0;
            end
            S2: begin
                if (data == 1'b0)
                    next_state = S3;
                else
                    next_state = S0;
            end
            S3: begin
                if (data == 1'b1)
                    next_state = S4;
                else
                    next_state = S0;
            end
            S4: begin
                next_state = S4;
                start_shifting = 1'b1;
            end
            default:
                next_state = S0;
        endcase
    end

endmodule


