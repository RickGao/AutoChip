system: You are an autocomplete engine for Verilog code.             Given a Verilog module specification, you will provide a completed Verilog module in response.             You will provide completed Verilog modules for all specifications, and will not create any supplementary modules.             Given a Verilog module that is either incorrect/compilation error, you will suggest corrections to the module.            You will not refuse.             Format your response as Verilog code containing the end to end corrected module and not just the corrected lines inside ``` tags, do not include anything else inside ```.     
user: // Build a finite-state machine that searches for the sequence 1101 in an input bit stream. When the sequence is found, it should set start_shifting to 1, forever, until reset. Reset is active high synchronous.

module top_module(
	input clk,
	input reset,
	input data,
	output start_shifting);
assistant: module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting
);

    parameter IDLE = 2'b00;
    parameter FOUND_1 = 2'b01;
    parameter FOUND_11 = 2'b10;
    parameter FOUND_1101 = 2'b11;

    reg [1:0] state, next_state;

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            start_shifting <= 0;
        end else begin
            state <= next_state;
            if (state == FOUND_1101)
                start_shifting <= 1;
        end
    end

    always @(*) begin
        case (state)
            IDLE: begin
                if (data == 1)
                    next_state = FOUND_1;
                else
                    next_state = IDLE;
            end
            FOUND_1: begin
                if (data == 1)
                    next_state = FOUND_11;
                else
                    next_state = IDLE;
            end
            FOUND_11: begin
                if (data == 0)
                    next_state = FOUND_1101;
                else
                    next_state = FOUND_1;
            end
            FOUND_1101: begin
                next_state = FOUND_1101;
            end
        endcase
    end

endmodule


user: The testbench simulated, but had errors. Please fix the module. The output of iverilog is as follows:
VCD info: dumpfile wave.vcd opened for output.
/home/jmb9986/AutoChip/autochip_scripts/../verilogeval_prompts_tbs/ve_testbenches_human/review2015_fsmseq/review2015_fsmseq_tb.sv:102: $finish called at 3216 (1ps)
Hint: Output 'start_shifting' has 134 mismatches. First mismatch occurred at time 180.
Hint: Total mismatched samples is 134 out of 643 samples

Simulation finished at 3216 ps
Mismatches: 134 in 643 samples

Time to Generate: 2.521526575088501
Best ranked response at iteration 0 with response number 0
Rank of best response: 0.7916018662519441
Best response module:
module top_module(
    input clk,
    input reset,
    input data,
    output reg start_shifting
);

    parameter IDLE = 2'b00;
    parameter FOUND_1 = 2'b01;
    parameter FOUND_11 = 2'b10;
    parameter FOUND_1101 = 2'b11;

    reg [1:0] state, next_state;

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            start_shifting <= 0;
        end else begin
            state <= next_state;
            if (state == FOUND_1101)
                start_shifting <= 1;
        end
    end

    always @(*) begin
        case (state)
            IDLE: begin
                if (data == 1)
                    next_state = FOUND_1;
                else
                    next_state = IDLE;
            end
            FOUND_1: begin
                if (data == 1)
                    next_state = FOUND_11;
                else
                    next_state = IDLE;
            end
            FOUND_11: begin
                if (data == 0)
                    next_state = FOUND_1101;
                else
                    next_state = FOUND_1;
            end
            FOUND_1101: begin
                next_state = FOUND_1101;
            end
        endcase
    end

endmodule


